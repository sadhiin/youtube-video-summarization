{
    "text": " hi welcome back in this lecture we'll see what is event-driven architecture well event-driven architecture is a software design pattern in which decoupled applications can asynchronously publish and subscribe to events via event broker or message broker well in a event-driven architecture the decoupled applications will basically use a message broker or event broker for asynchronous communication between publisher and subscriber all right in an event-driven architecture applications communicate with each other by sending or receiving events or message well in event-driven architecture the event means an action okay so whenever something happens inside or outside your organization an event has occurred so events basically means actions that can be anything for example if you consider this event-driven microservice architecture over here this architecture has three applications or three micro services order service stock service and email service and whenever a customer plays the order then that time the event will be created for example create event and that event will be you know published to message broker and then stock service and email service these two services will basically consume that message from the message broker and in this event ribbon microservice architecture all the applications are loosely coupled okay so they are independent to each other all right so event-driven architecture means it is a software design pattern in which all the decoupled applications will use message broker for asynchronous communication okay so this is how the event-driven architecture looks like well event-driven architecture is often referred as a asynchronous communication for example if you consider this event microservice architecture over here this architecture has multiple micro services right order service talk and email service well order service whenever it will create the order event and it will push that order event in a message broker then order service don't have to wait for the response it can proceed to you know to executing its other remaining task okay so this is how the asynchronous communication whenever a order service it will create the event and publish that event to the message broker then it don't have to wait for the response okay so this is the asynchronous communication well event driven applications can be created in any programming language because event-driven is a programming approach not a language well you can develop event-driven architecture in any programming language well an event-driven architecture is loosely coupled for example consider our architecture here even your microservice architecture in this architecture we have three micro services order service stock service and email service and all these three micro services are independent each other it means all these three micro services are loosely coupled okay so order service you don't have to know about stock service or email service order service just have to send an you know message or event to the message broker that's it it don't have to know about the consumers all right similarly stock service and email service so these are the consumers and they don't have to know about the producer they only responsible to consume or read the message from the message broker they don't have to know about the producer okay who is producing the messages all right so this is how the event-driven architecture looks like so in a event-driven architecture all the applications are loosely coupled all right so this is all about event-driven architecture and event-driven architecture is widely used in micro services all right in next lecture we'll see how event-driven micros architecture works and its advantages all right i will see you in next lecture",
    "task": "transcribe",
    "language": "English",
    "duration": 226.4305,
    "segments": [
        {
            "id": 0,
            "seek": 0,
            "start": 0.32,
            "end": 7.12,
            "text": " hi welcome back in this lecture we'll see what is event-driven architecture well event-driven",
            "tokens": [
                50381,
                4879,
                2928,
                646,
                294,
                341,
                7991,
                321,
                603,
                536,
                437,
                307,
                2280,
                12,
                25456,
                9482,
                731,
                2280,
                12,
                25456,
                50721
            ],
            "temperature": 0,
            "avg_logprob": -0.050836444,
            "compression_ratio": 1.9891891,
            "no_speech_prob": 2.280369e-12
        },
        {
            "id": 1,
            "seek": 0,
            "start": 7.12,
            "end": 12.32,
            "text": " architecture is a software design pattern in which decoupled applications can asynchronously",
            "tokens": [
                50721,
                9482,
                307,
                257,
                4722,
                1715,
                5102,
                294,
                597,
                979,
                263,
                15551,
                5821,
                393,
                42642,
                5098,
                50981
            ],
            "temperature": 0,
            "avg_logprob": -0.050836444,
            "compression_ratio": 1.9891891,
            "no_speech_prob": 2.280369e-12
        },
        {
            "id": 2,
            "seek": 0,
            "start": 12.32,
            "end": 18.96,
            "text": " publish and subscribe to events via event broker or message broker well in a event-driven architecture",
            "tokens": [
                50981,
                11374,
                293,
                3022,
                281,
                3931,
                5766,
                2280,
                26502,
                420,
                3636,
                26502,
                731,
                294,
                257,
                2280,
                12,
                25456,
                9482,
                51313
            ],
            "temperature": 0,
            "avg_logprob": -0.050836444,
            "compression_ratio": 1.9891891,
            "no_speech_prob": 2.280369e-12
        },
        {
            "id": 3,
            "seek": 0,
            "start": 18.96,
            "end": 23.52,
            "text": " the decoupled applications will basically use a message broker or event broker",
            "tokens": [
                51313,
                264,
                979,
                263,
                15551,
                5821,
                486,
                1936,
                764,
                257,
                3636,
                26502,
                420,
                2280,
                26502,
                51541
            ],
            "temperature": 0,
            "avg_logprob": -0.050836444,
            "compression_ratio": 1.9891891,
            "no_speech_prob": 2.280369e-12
        },
        {
            "id": 4,
            "seek": 2352,
            "start": 23.52,
            "end": 29.6,
            "text": " for asynchronous communication between publisher and subscriber all right in an event-driven",
            "tokens": [
                50365,
                337,
                49174,
                6101,
                1296,
                25088,
                293,
                26122,
                439,
                558,
                294,
                364,
                2280,
                12,
                25456,
                50669
            ],
            "temperature": 0,
            "avg_logprob": -0.055747785,
            "compression_ratio": 1.8818898,
            "no_speech_prob": 1.1556939e-12
        },
        {
            "id": 5,
            "seek": 2352,
            "start": 29.6,
            "end": 35.52,
            "text": " architecture applications communicate with each other by sending or receiving events or message",
            "tokens": [
                50669,
                9482,
                5821,
                7890,
                365,
                1184,
                661,
                538,
                7750,
                420,
                10040,
                3931,
                420,
                3636,
                50965
            ],
            "temperature": 0,
            "avg_logprob": -0.055747785,
            "compression_ratio": 1.8818898,
            "no_speech_prob": 1.1556939e-12
        },
        {
            "id": 6,
            "seek": 2352,
            "start": 35.52,
            "end": 40.88,
            "text": " well in event-driven architecture the event means an action okay so whenever something happens",
            "tokens": [
                50965,
                731,
                294,
                2280,
                12,
                25456,
                9482,
                264,
                2280,
                1355,
                364,
                3069,
                1392,
                370,
                5699,
                746,
                2314,
                51233
            ],
            "temperature": 0,
            "avg_logprob": -0.055747785,
            "compression_ratio": 1.8818898,
            "no_speech_prob": 1.1556939e-12
        },
        {
            "id": 7,
            "seek": 2352,
            "start": 40.88,
            "end": 47.52,
            "text": " inside or outside your organization an event has occurred so events basically means actions that",
            "tokens": [
                51233,
                1854,
                420,
                2380,
                428,
                4475,
                364,
                2280,
                575,
                11068,
                370,
                3931,
                1936,
                1355,
                5909,
                300,
                51565
            ],
            "temperature": 0,
            "avg_logprob": -0.055747785,
            "compression_ratio": 1.8818898,
            "no_speech_prob": 1.1556939e-12
        },
        {
            "id": 8,
            "seek": 2352,
            "start": 47.52,
            "end": 52.56,
            "text": " can be anything for example if you consider this event-driven microservice architecture over here",
            "tokens": [
                51565,
                393,
                312,
                1340,
                337,
                1365,
                498,
                291,
                1949,
                341,
                2280,
                12,
                25456,
                15547,
                25006,
                9482,
                670,
                510,
                51817
            ],
            "temperature": 0,
            "avg_logprob": -0.055747785,
            "compression_ratio": 1.8818898,
            "no_speech_prob": 1.1556939e-12
        },
        {
            "id": 9,
            "seek": 5256,
            "start": 52.56,
            "end": 59.12,
            "text": " this architecture has three applications or three micro services order service stock service and",
            "tokens": [
                50365,
                341,
                9482,
                575,
                1045,
                5821,
                420,
                1045,
                4532,
                3328,
                1668,
                2643,
                4127,
                2643,
                293,
                50693
            ],
            "temperature": 0,
            "avg_logprob": -0.06324307,
            "compression_ratio": 2.1369863,
            "no_speech_prob": 2.5541214e-12
        },
        {
            "id": 10,
            "seek": 5256,
            "start": 59.12,
            "end": 64.56,
            "text": " email service and whenever a customer plays the order then that time the event will be created",
            "tokens": [
                50693,
                3796,
                2643,
                293,
                5699,
                257,
                5474,
                5749,
                264,
                1668,
                550,
                300,
                565,
                264,
                2280,
                486,
                312,
                2942,
                50965
            ],
            "temperature": 0,
            "avg_logprob": -0.06324307,
            "compression_ratio": 2.1369863,
            "no_speech_prob": 2.5541214e-12
        },
        {
            "id": 11,
            "seek": 5256,
            "start": 64.56,
            "end": 71.12,
            "text": " for example create event and that event will be you know published to message broker and then stock",
            "tokens": [
                50965,
                337,
                1365,
                1884,
                2280,
                293,
                300,
                2280,
                486,
                312,
                291,
                458,
                6572,
                281,
                3636,
                26502,
                293,
                550,
                4127,
                51293
            ],
            "temperature": 0,
            "avg_logprob": -0.06324307,
            "compression_ratio": 2.1369863,
            "no_speech_prob": 2.5541214e-12
        },
        {
            "id": 12,
            "seek": 5256,
            "start": 71.12,
            "end": 75.92,
            "text": " service and email service these two services will basically consume that message from the",
            "tokens": [
                51293,
                2643,
                293,
                3796,
                2643,
                613,
                732,
                3328,
                486,
                1936,
                14732,
                300,
                3636,
                490,
                264,
                51533
            ],
            "temperature": 0,
            "avg_logprob": -0.06324307,
            "compression_ratio": 2.1369863,
            "no_speech_prob": 2.5541214e-12
        },
        {
            "id": 13,
            "seek": 5256,
            "start": 75.92,
            "end": 81.28,
            "text": " message broker and in this event ribbon microservice architecture all the applications",
            "tokens": [
                51533,
                3636,
                26502,
                293,
                294,
                341,
                2280,
                20921,
                15547,
                25006,
                9482,
                439,
                264,
                5821,
                51801
            ],
            "temperature": 0,
            "avg_logprob": -0.06324307,
            "compression_ratio": 2.1369863,
            "no_speech_prob": 2.5541214e-12
        },
        {
            "id": 14,
            "seek": 8128,
            "start": 81.28,
            "end": 87.68,
            "text": " are loosely coupled okay so they are independent to each other all right so event-driven architecture",
            "tokens": [
                50365,
                366,
                37966,
                29482,
                1392,
                370,
                436,
                366,
                6695,
                281,
                1184,
                661,
                439,
                558,
                370,
                2280,
                12,
                25456,
                9482,
                50685
            ],
            "temperature": 0,
            "avg_logprob": -0.08871656,
            "compression_ratio": 2.0204082,
            "no_speech_prob": 2.150636e-12
        },
        {
            "id": 15,
            "seek": 8128,
            "start": 87.68,
            "end": 93.92,
            "text": " means it is a software design pattern in which all the decoupled applications will use message broker",
            "tokens": [
                50685,
                1355,
                309,
                307,
                257,
                4722,
                1715,
                5102,
                294,
                597,
                439,
                264,
                979,
                263,
                15551,
                5821,
                486,
                764,
                3636,
                26502,
                50997
            ],
            "temperature": 0,
            "avg_logprob": -0.08871656,
            "compression_ratio": 2.0204082,
            "no_speech_prob": 2.150636e-12
        },
        {
            "id": 16,
            "seek": 8128,
            "start": 93.92,
            "end": 100.88,
            "text": " for asynchronous communication okay so this is how the event-driven architecture looks like well",
            "tokens": [
                50997,
                337,
                49174,
                6101,
                1392,
                370,
                341,
                307,
                577,
                264,
                2280,
                12,
                25456,
                9482,
                1542,
                411,
                731,
                51345
            ],
            "temperature": 0,
            "avg_logprob": -0.08871656,
            "compression_ratio": 2.0204082,
            "no_speech_prob": 2.150636e-12
        },
        {
            "id": 17,
            "seek": 8128,
            "start": 100.88,
            "end": 105.84,
            "text": " event-driven architecture is often referred as a asynchronous communication for example if you",
            "tokens": [
                51345,
                2280,
                12,
                25456,
                9482,
                307,
                2049,
                10839,
                382,
                257,
                49174,
                6101,
                337,
                1365,
                498,
                291,
                51593
            ],
            "temperature": 0,
            "avg_logprob": -0.08871656,
            "compression_ratio": 2.0204082,
            "no_speech_prob": 2.150636e-12
        },
        {
            "id": 18,
            "seek": 108,
            "start": 105.84,
            "end": 119.4305,
            "text": " consider this event microservice architecture over here this architecture has multiple micro services right order service talk and email service well order service whenever it will create the order event and it will push that order event in a",
            "tokens": [
                51593,
                1949,
                341,
                2280,
                12,
                25456,
                15547,
                25006,
                9482,
                670,
                510,
                341,
                9482,
                575,
                3866,
                4532,
                51825,
                50365,
                3328,
                558,
                1668,
                2643,
                751,
                293,
                3796,
                2643,
                50545,
                50545,
                50672,
                1668,
                2643,
                5699,
                309,
                486,
                1884,
                264,
                1668,
                2280,
                293,
                309,
                486,
                2944,
                300,
                1668,
                2280,
                294,
                257,
                50925
            ],
            "temperature": 0,
            "avg_logprob": -0.054892607,
            "compression_ratio": 2.0170941,
            "no_speech_prob": 4.194412e-12
        },
        {
            "id": 19,
            "seek": 108,
            "start": 119.4305,
            "end": 124.9705,
            "text": " message broker then order service don't have to wait for the response it can proceed to you know",
            "tokens": [
                50925,
                3636,
                26502,
                550,
                1668,
                2643,
                500,
                380,
                362,
                281,
                1699,
                337,
                264,
                4134,
                309,
                393,
                8991,
                281,
                291,
                458,
                51202
            ],
            "temperature": 0,
            "avg_logprob": -0.054892607,
            "compression_ratio": 2.0170941,
            "no_speech_prob": 4.194412e-12
        },
        {
            "id": 20,
            "seek": 108,
            "start": 124.9705,
            "end": 130.77051,
            "text": " to executing its other remaining task okay so this is how the asynchronous communication",
            "tokens": [
                51202,
                281,
                32368,
                1080,
                661,
                8877,
                5633,
                1392,
                370,
                341,
                307,
                577,
                264,
                49174,
                6101,
                51492
            ],
            "temperature": 0,
            "avg_logprob": -0.054892607,
            "compression_ratio": 2.0170941,
            "no_speech_prob": 4.194412e-12
        },
        {
            "id": 21,
            "seek": 108,
            "start": 130.77051,
            "end": 135.8505,
            "text": " whenever a order service it will create the event and publish that event to the message broker then",
            "tokens": [
                51492,
                5699,
                257,
                1668,
                2643,
                309,
                486,
                1884,
                264,
                2280,
                293,
                11374,
                300,
                2280,
                281,
                264,
                3636,
                26502,
                550,
                51746
            ],
            "temperature": 0,
            "avg_logprob": -0.054892607,
            "compression_ratio": 2.0170941,
            "no_speech_prob": 4.194412e-12
        },
        {
            "id": 22,
            "seek": 2870,
            "start": 135.8505,
            "end": 142.1705,
            "text": " it don't have to wait for the response okay so this is the asynchronous communication well event",
            "tokens": [
                50365,
                309,
                500,
                380,
                362,
                281,
                1699,
                337,
                264,
                4134,
                1392,
                370,
                341,
                307,
                264,
                49174,
                6101,
                731,
                2280,
                50681
            ],
            "temperature": 0,
            "avg_logprob": -0.06635511,
            "compression_ratio": 2.0316741,
            "no_speech_prob": 1.7342315e-12
        },
        {
            "id": 23,
            "seek": 2870,
            "start": 142.1705,
            "end": 146.8905,
            "text": " driven applications can be created in any programming language because event-driven is",
            "tokens": [
                50681,
                9555,
                5821,
                393,
                312,
                2942,
                294,
                604,
                9410,
                2856,
                570,
                2280,
                12,
                25456,
                307,
                50917
            ],
            "temperature": 0,
            "avg_logprob": -0.06635511,
            "compression_ratio": 2.0316741,
            "no_speech_prob": 1.7342315e-12
        },
        {
            "id": 24,
            "seek": 2870,
            "start": 146.8905,
            "end": 152.1705,
            "text": " a programming approach not a language well you can develop event-driven architecture in any",
            "tokens": [
                50917,
                257,
                9410,
                3109,
                406,
                257,
                2856,
                731,
                291,
                393,
                1499,
                2280,
                12,
                25456,
                9482,
                294,
                604,
                51181
            ],
            "temperature": 0,
            "avg_logprob": -0.06635511,
            "compression_ratio": 2.0316741,
            "no_speech_prob": 1.7342315e-12
        },
        {
            "id": 25,
            "seek": 2870,
            "start": 152.1705,
            "end": 157.4505,
            "text": " programming language well an event-driven architecture is loosely coupled for example",
            "tokens": [
                51181,
                9410,
                2856,
                731,
                364,
                2280,
                12,
                25456,
                9482,
                307,
                37966,
                29482,
                337,
                1365,
                51445
            ],
            "temperature": 0,
            "avg_logprob": -0.06635511,
            "compression_ratio": 2.0316741,
            "no_speech_prob": 1.7342315e-12
        },
        {
            "id": 26,
            "seek": 2870,
            "start": 157.4505,
            "end": 161.8505,
            "text": " consider our architecture here even your microservice architecture in this architecture",
            "tokens": [
                51445,
                1949,
                527,
                9482,
                510,
                754,
                428,
                15547,
                25006,
                9482,
                294,
                341,
                9482,
                51665
            ],
            "temperature": 0,
            "avg_logprob": -0.06635511,
            "compression_ratio": 2.0316741,
            "no_speech_prob": 1.7342315e-12
        },
        {
            "id": 27,
            "seek": 5470,
            "start": 161.8505,
            "end": 167.9305,
            "text": " we have three micro services order service stock service and email service and all these three",
            "tokens": [
                50365,
                321,
                362,
                1045,
                4532,
                3328,
                1668,
                2643,
                4127,
                2643,
                293,
                3796,
                2643,
                293,
                439,
                613,
                1045,
                50669
            ],
            "temperature": 0.6,
            "avg_logprob": -0.09403667,
            "compression_ratio": 2.2848837,
            "no_speech_prob": 2.0363696e-12
        },
        {
            "id": 28,
            "seek": 5470,
            "start": 167.9305,
            "end": 174.8105,
            "text": " micro services are independent each other it means all these three micro services are loosely coupled",
            "tokens": [
                50669,
                4532,
                3328,
                366,
                6695,
                1184,
                661,
                309,
                1355,
                439,
                613,
                1045,
                4532,
                3328,
                366,
                37966,
                29482,
                51013
            ],
            "temperature": 0.6,
            "avg_logprob": -0.09403667,
            "compression_ratio": 2.2848837,
            "no_speech_prob": 2.0363696e-12
        },
        {
            "id": 29,
            "seek": 5470,
            "start": 174.8105,
            "end": 181.1305,
            "text": " okay so order service you don't have to know about stock service or email service order service just",
            "tokens": [
                51013,
                1392,
                370,
                1668,
                2643,
                291,
                500,
                380,
                362,
                281,
                458,
                466,
                4127,
                2643,
                420,
                3796,
                2643,
                1668,
                2643,
                445,
                51329
            ],
            "temperature": 0.6,
            "avg_logprob": -0.09403667,
            "compression_ratio": 2.2848837,
            "no_speech_prob": 2.0363696e-12
        },
        {
            "id": 30,
            "seek": 5470,
            "start": 181.1305,
            "end": 186.25049,
            "text": " have to send an you know message or event to the message broker that's it it don't have to know",
            "tokens": [
                51329,
                362,
                281,
                2845,
                364,
                291,
                458,
                3636,
                420,
                2280,
                281,
                264,
                3636,
                26502,
                300,
                311,
                309,
                309,
                500,
                380,
                362,
                281,
                458,
                51585
            ],
            "temperature": 0.6,
            "avg_logprob": -0.09403667,
            "compression_ratio": 2.2848837,
            "no_speech_prob": 2.0363696e-12
        },
        {
            "id": 31,
            "seek": 7910,
            "start": 186.25049,
            "end": 191.9305,
            "text": " about the consumers all right similarly stock service and email service so these are the consumers",
            "tokens": [
                50365,
                466,
                264,
                11883,
                439,
                558,
                14138,
                4127,
                2643,
                293,
                3796,
                2643,
                370,
                613,
                366,
                264,
                11883,
                50649
            ],
            "temperature": 0,
            "avg_logprob": -0.052137606,
            "compression_ratio": 2.1846848,
            "no_speech_prob": 1.6172279e-12
        },
        {
            "id": 32,
            "seek": 7910,
            "start": 191.9305,
            "end": 197.6105,
            "text": " and they don't have to know about the producer they only responsible to consume or read the",
            "tokens": [
                50649,
                293,
                436,
                500,
                380,
                362,
                281,
                458,
                466,
                264,
                12314,
                436,
                787,
                6250,
                281,
                14732,
                420,
                1401,
                264,
                50933
            ],
            "temperature": 0,
            "avg_logprob": -0.052137606,
            "compression_ratio": 2.1846848,
            "no_speech_prob": 1.6172279e-12
        },
        {
            "id": 33,
            "seek": 7910,
            "start": 197.6105,
            "end": 203.1305,
            "text": " message from the message broker they don't have to know about the producer okay who is producing the",
            "tokens": [
                50933,
                3636,
                490,
                264,
                3636,
                26502,
                436,
                500,
                380,
                362,
                281,
                458,
                466,
                264,
                12314,
                1392,
                567,
                307,
                10501,
                264,
                51209
            ],
            "temperature": 0,
            "avg_logprob": -0.052137606,
            "compression_ratio": 2.1846848,
            "no_speech_prob": 1.6172279e-12
        },
        {
            "id": 34,
            "seek": 7910,
            "start": 203.1305,
            "end": 208.6505,
            "text": " messages all right so this is how the event-driven architecture looks like so in a event-driven",
            "tokens": [
                51209,
                7897,
                439,
                558,
                370,
                341,
                307,
                577,
                264,
                2280,
                12,
                25456,
                9482,
                1542,
                411,
                370,
                294,
                257,
                2280,
                12,
                25456,
                51485
            ],
            "temperature": 0,
            "avg_logprob": -0.052137606,
            "compression_ratio": 2.1846848,
            "no_speech_prob": 1.6172279e-12
        },
        {
            "id": 35,
            "seek": 7910,
            "start": 208.6505,
            "end": 214.3305,
            "text": " architecture all the applications are loosely coupled all right so this is all about event-driven",
            "tokens": [
                51485,
                9482,
                439,
                264,
                5821,
                366,
                37966,
                29482,
                439,
                558,
                370,
                341,
                307,
                439,
                466,
                2280,
                12,
                25456,
                51769
            ],
            "temperature": 0,
            "avg_logprob": -0.052137606,
            "compression_ratio": 2.1846848,
            "no_speech_prob": 1.6172279e-12
        },
        {
            "id": 36,
            "seek": 10718,
            "start": 214.3305,
            "end": 220.0105,
            "text": " architecture and event-driven architecture is widely used in micro services all right in next",
            "tokens": [
                50365,
                9482,
                293,
                2280,
                12,
                25456,
                9482,
                307,
                13371,
                1143,
                294,
                4532,
                3328,
                439,
                558,
                294,
                958,
                50649
            ],
            "temperature": 0,
            "avg_logprob": -0.13085721,
            "compression_ratio": 1.7983193,
            "no_speech_prob": 2.3615422e-12
        },
        {
            "id": 37,
            "seek": 10718,
            "start": 220.0105,
            "end": 224.41049,
            "text": " lecture we'll see how event-driven micros architecture works and its advantages all",
            "tokens": [
                50649,
                7991,
                321,
                603,
                536,
                577,
                2280,
                12,
                25456,
                15547,
                9482,
                1985,
                293,
                1080,
                14906,
                439,
                50869
            ],
            "temperature": 0,
            "avg_logprob": -0.13085721,
            "compression_ratio": 1.7983193,
            "no_speech_prob": 2.3615422e-12
        },
        {
            "id": 38,
            "seek": 10718,
            "start": 224.41049,
            "end": 226.1705,
            "text": " right i will see you in next lecture",
            "tokens": [
                50869,
                558,
                741,
                486,
                536,
                291,
                294,
                958,
                7991,
                50957
            ],
            "temperature": 0,
            "avg_logprob": -0.13085721,
            "compression_ratio": 1.7983193,
            "no_speech_prob": 2.3615422e-12
        }
    ],
    "x_groq": {
        "id": "req_01js4b7y0gfg4tzrwvdcht0m3g"
    }
}