{
    "text": " Welcome back. In this video we will be talking about solid principles. As it says in here, don't dare to violate them. What are the five solid principles? The five solid principles are single responsibility principle, open-close principle, Liskov substitution principle, interface segregation principle, and the dependency inversor principle. Let's start with the first one, the single responsibility principle. Single responsibility principle is all about having only one reason to change. Whether you're talking about a class, whether you're talking about a package, a component or an application, they should all have one responsibility. You should be able to define what an application is doing in a single line. And when you are able to achieve your single responsibility principle, you would see that the amount of possibility of reuse would increase. Look at this specific class. It's responsible for downloading something from internet, it's responsible for parsing something, it's responsible for saving that data to the database. Is that meeting the single responsibility principle? Will I be able to reuse this kind of code in anywhere else? The answer is no. Let's look at another example. This is actually doing a calculation of a pay. It's creating a report and it's saving the employee details to the database. These are classes with multiple responsibilities. So single responsibility principle is all about having classes which do one thing. The second most important principle is the open closed principle. It says software entity should be open for extension but closed for modification. What does that mean? Look at this implementation of calculating area for a shape. Here's passing in an array of shapes and we are checking if a shape is rectangle then do else do this. What if I have to add a few more shapes? All the logic would be centralized in this specific piece of code. So whenever I add a new object then I should start modifying all the code which is present in the area method Now what would be a better solution A better solution would be allowing each of the shapes to define their own area methods So here we are creating an abstract class called shape. This could also be an interface. And we are creating an area method inside the rectangle class, implementing the abstract method in here. The area method would only be responsible for looping around them and calling the area method on the specific shape. So this area method is now having only the logic to loop around the shapes and add the areas in. This is a very good example of open close principle. Now if you want to add a new shape you don't really need to change the area method. So this area method is closed for modification. You don't need to change this. But we are open for extension because whenever you would want to create a new shape, all that you need to do is to create the shape and define the area method inside it. So we are open for extension, open for new shapes, but we are closed for modification. We don't really need to change the area method. The third principle is the Liskov substitution principle. One of the things people tend to do in object-oriented programming is try and use inheritance even when it's not really the right thing to do just for the sake of reusing the code. Liskov substitution principle says subtypes must be substitutable for their base types. Let's consider an example. Let's say there's a rectangle class and we have a set width and the set height method which is implemented and we have a get height and the get width method as well. And now there is a new requirement to implement a square class. And what I do is instead of trying to implement a square class on its own, I would try and extend the rectangle class. So let say I would say square extends rectangle and I create a set width method where I would set both height and width to W And I would do the set height method where it sets both height and width to H Is that a good implementation Liskov substitution principle says it's a bad implementation. Consider a piece of code like this right so if somebody wants to test a rectangle let's say this is the method which is written r.setWidth5 setHeight5 and he's checking if the area is 5 into 4 will the square class pass this test the answer is no because your set height is actually setting both height and width to the same value as h so what would happen is set height 4 will set both height and width to 4 so the area would be 4 into 4 and it will not be 5 into 4 you should always be careful when you use inheritance you should use inheritance only when your super class is replaceable by a subclass in all the instances. Don't use inheritance just to save a few lines of code. The fourth principle we would be talking about is called the interface segregation principle. When two systems or two classes are talking to each other then they should have the smallest possible interface that is defined. Why is that important? Let's take an example. Let's say I have an animal interface which is having an abstract feed method. We are creating two classes dog and tiger. Implement the feed method. Let's say now I would need to add a feature to groom. What would happen if I add the groom method to the animal interface? What would happen is the dog and the tiger need to implement the groom method. Groom is something which should only be applicable to domestic animals. So I can groom a dog, but for a tiger, I am providing a dummy implementation just to keep the compiler happy. Is that good implementation? The answer is no. The ideal way to handle that would have been to create another interface called pet. Instead of adding features to the existing interface it better to create a new interface called pet extending the existing interface and adding the groom method in The dog can extend the pet interface because groom is applicable to it, but tiger would continue to extend the animal interface. That's what interface segregation principle is all about. Keep your interfaces as small as possible. the moment you have fat interfaces with a lot of methods then every time you change the interface then it means that all the implementing classes also should change the fifth principle that we would be talking about is the dependency inversion principle it says depend upon interfaces or abstractions rather than concrete classes what does that mean let's look at an example look at this implementation of the copy method what it's doing is based on the output device which is passed in which could be printer or a disk whatever is read from the keyboard it would be written down to the output device so you can see the logic for it in here right so you read it from the keyboard and you are checking if the output device is printer then write to printer else write to disk now what is the problem with this the problem is as your number of output devices increases this copy method needs to keep changing a better implementation would be to create a simple interface like reader and have a interface writer and the copy method can write from any reader to any writer so the copy method does not change when you have a new writer or a new reader this is a good example of a dependency inversion principle in this video we looked at solid principles the idea was just to quickly introduce you to all the principles with a few code examples we looked at single responsibility principle we looked at open close principle we looked at list code substitution principle and we looked at interface segregation principle as well as the dependency inversion principle I'll see you in the next step until then bye bye",
    "task": "transcribe",
    "language": "English",
    "duration": 496.00575000000003,
    "segments": [
        {
            "id": 0,
            "seek": 0,
            "start": 0,
            "end": 8.36,
            "text": " Welcome back. In this video we will be talking about solid principles. As it says in here,",
            "tokens": [
                50365,
                4027,
                646,
                13,
                682,
                341,
                960,
                321,
                486,
                312,
                1417,
                466,
                5100,
                9156,
                13,
                1018,
                309,
                1619,
                294,
                510,
                11,
                50783
            ],
            "temperature": 0,
            "avg_logprob": -0.21600936,
            "compression_ratio": 1.9702128,
            "no_speech_prob": 1.6235165e-12
        },
        {
            "id": 1,
            "seek": 0,
            "start": 8.36,
            "end": 12.88,
            "text": " don't dare to violate them. What are the five solid principles? The five solid principles are",
            "tokens": [
                50783,
                500,
                380,
                8955,
                281,
                37478,
                552,
                13,
                708,
                366,
                264,
                1732,
                5100,
                9156,
                30,
                440,
                1732,
                5100,
                9156,
                366,
                51009
            ],
            "temperature": 0,
            "avg_logprob": -0.21600936,
            "compression_ratio": 1.9702128,
            "no_speech_prob": 1.6235165e-12
        },
        {
            "id": 2,
            "seek": 0,
            "start": 12.88,
            "end": 17.1,
            "text": " single responsibility principle, open-close principle, Liskov substitution principle,",
            "tokens": [
                51009,
                2167,
                6357,
                8665,
                11,
                1269,
                12,
                3474,
                541,
                8665,
                11,
                30812,
                33516,
                35827,
                8665,
                11,
                51220
            ],
            "temperature": 0,
            "avg_logprob": -0.21600936,
            "compression_ratio": 1.9702128,
            "no_speech_prob": 1.6235165e-12
        },
        {
            "id": 3,
            "seek": 0,
            "start": 17.1,
            "end": 22.86,
            "text": " interface segregation principle, and the dependency inversor principle. Let's start with the first one,",
            "tokens": [
                51220,
                9226,
                34317,
                8665,
                11,
                293,
                264,
                33621,
                21378,
                284,
                8665,
                13,
                961,
                311,
                722,
                365,
                264,
                700,
                472,
                11,
                51508
            ],
            "temperature": 0,
            "avg_logprob": -0.21600936,
            "compression_ratio": 1.9702128,
            "no_speech_prob": 1.6235165e-12
        },
        {
            "id": 4,
            "seek": 0,
            "start": 22.86,
            "end": 27.22,
            "text": " the single responsibility principle. Single responsibility principle is all about having",
            "tokens": [
                51508,
                264,
                2167,
                6357,
                8665,
                13,
                31248,
                6357,
                8665,
                307,
                439,
                466,
                1419,
                51726
            ],
            "temperature": 0,
            "avg_logprob": -0.21600936,
            "compression_ratio": 1.9702128,
            "no_speech_prob": 1.6235165e-12
        },
        {
            "id": 5,
            "seek": 2722,
            "start": 27.22,
            "end": 32.06,
            "text": " only one reason to change. Whether you're talking about a class, whether you're talking about a",
            "tokens": [
                50365,
                787,
                472,
                1778,
                281,
                1319,
                13,
                8503,
                291,
                434,
                1417,
                466,
                257,
                1508,
                11,
                1968,
                291,
                434,
                1417,
                466,
                257,
                50607
            ],
            "temperature": 0,
            "avg_logprob": -0.078676745,
            "compression_ratio": 1.8146719,
            "no_speech_prob": 5.55607e-12
        },
        {
            "id": 6,
            "seek": 2722,
            "start": 32.06,
            "end": 40.44,
            "text": " package, a component or an application, they should all have one responsibility. You should",
            "tokens": [
                50607,
                7372,
                11,
                257,
                6542,
                420,
                364,
                3861,
                11,
                436,
                820,
                439,
                362,
                472,
                6357,
                13,
                509,
                820,
                51026
            ],
            "temperature": 0,
            "avg_logprob": -0.078676745,
            "compression_ratio": 1.8146719,
            "no_speech_prob": 5.55607e-12
        },
        {
            "id": 7,
            "seek": 2722,
            "start": 40.44,
            "end": 45.42,
            "text": " be able to define what an application is doing in a single line. And when you are able to achieve",
            "tokens": [
                51026,
                312,
                1075,
                281,
                6964,
                437,
                364,
                3861,
                307,
                884,
                294,
                257,
                2167,
                1622,
                13,
                400,
                562,
                291,
                366,
                1075,
                281,
                4584,
                51275
            ],
            "temperature": 0,
            "avg_logprob": -0.078676745,
            "compression_ratio": 1.8146719,
            "no_speech_prob": 5.55607e-12
        },
        {
            "id": 8,
            "seek": 2722,
            "start": 45.42,
            "end": 51.04,
            "text": " your single responsibility principle, you would see that the amount of possibility of reuse would",
            "tokens": [
                51275,
                428,
                2167,
                6357,
                8665,
                11,
                291,
                576,
                536,
                300,
                264,
                2372,
                295,
                7959,
                295,
                26225,
                576,
                51556
            ],
            "temperature": 0,
            "avg_logprob": -0.078676745,
            "compression_ratio": 1.8146719,
            "no_speech_prob": 5.55607e-12
        },
        {
            "id": 9,
            "seek": 2722,
            "start": 51.04,
            "end": 56.02,
            "text": " increase. Look at this specific class. It's responsible for downloading something from",
            "tokens": [
                51556,
                3488,
                13,
                2053,
                412,
                341,
                2685,
                1508,
                13,
                467,
                311,
                6250,
                337,
                32529,
                746,
                490,
                51805
            ],
            "temperature": 0,
            "avg_logprob": -0.078676745,
            "compression_ratio": 1.8146719,
            "no_speech_prob": 5.55607e-12
        },
        {
            "id": 10,
            "seek": 5602,
            "start": 56.02,
            "end": 60.4,
            "text": " internet, it's responsible for parsing something, it's responsible for saving",
            "tokens": [
                50365,
                4705,
                11,
                309,
                311,
                6250,
                337,
                21156,
                278,
                746,
                11,
                309,
                311,
                6250,
                337,
                6816,
                50584
            ],
            "temperature": 0,
            "avg_logprob": -0.15695366,
            "compression_ratio": 1.7509727,
            "no_speech_prob": 1.0119501e-12
        },
        {
            "id": 11,
            "seek": 5602,
            "start": 60.4,
            "end": 65.08,
            "text": " that data to the database. Is that meeting the single responsibility",
            "tokens": [
                50584,
                300,
                1412,
                281,
                264,
                8149,
                13,
                1119,
                300,
                3440,
                264,
                2167,
                6357,
                50818
            ],
            "temperature": 0,
            "avg_logprob": -0.15695366,
            "compression_ratio": 1.7509727,
            "no_speech_prob": 1.0119501e-12
        },
        {
            "id": 12,
            "seek": 5602,
            "start": 65.08,
            "end": 69.7,
            "text": " principle? Will I be able to reuse this kind of code in anywhere else? The answer",
            "tokens": [
                50818,
                8665,
                30,
                3099,
                286,
                312,
                1075,
                281,
                26225,
                341,
                733,
                295,
                3089,
                294,
                4992,
                1646,
                30,
                440,
                1867,
                51049
            ],
            "temperature": 0,
            "avg_logprob": -0.15695366,
            "compression_ratio": 1.7509727,
            "no_speech_prob": 1.0119501e-12
        },
        {
            "id": 13,
            "seek": 5602,
            "start": 69.7,
            "end": 75.02,
            "text": " is no. Let's look at another example. This is actually doing a calculation of a pay.",
            "tokens": [
                51049,
                307,
                572,
                13,
                961,
                311,
                574,
                412,
                1071,
                1365,
                13,
                639,
                307,
                767,
                884,
                257,
                17108,
                295,
                257,
                1689,
                13,
                51315
            ],
            "temperature": 0,
            "avg_logprob": -0.15695366,
            "compression_ratio": 1.7509727,
            "no_speech_prob": 1.0119501e-12
        },
        {
            "id": 14,
            "seek": 5602,
            "start": 75.02,
            "end": 80.1,
            "text": " It's creating a report and it's saving the employee details to the database.",
            "tokens": [
                51315,
                467,
                311,
                4084,
                257,
                2275,
                293,
                309,
                311,
                6816,
                264,
                10738,
                4365,
                281,
                264,
                8149,
                13,
                51569
            ],
            "temperature": 0,
            "avg_logprob": -0.15695366,
            "compression_ratio": 1.7509727,
            "no_speech_prob": 1.0119501e-12
        },
        {
            "id": 15,
            "seek": 5602,
            "start": 80.1,
            "end": 85.12,
            "text": " These are classes with multiple responsibilities. So single",
            "tokens": [
                51569,
                1981,
                366,
                5359,
                365,
                3866,
                16190,
                13,
                407,
                2167,
                51820
            ],
            "temperature": 0,
            "avg_logprob": -0.15695366,
            "compression_ratio": 1.7509727,
            "no_speech_prob": 1.0119501e-12
        },
        {
            "id": 16,
            "seek": 8512,
            "start": 85.12,
            "end": 90.4,
            "text": " responsibility principle is all about having classes which do one thing. The",
            "tokens": [
                50365,
                6357,
                8665,
                307,
                439,
                466,
                1419,
                5359,
                597,
                360,
                472,
                551,
                13,
                440,
                50629
            ],
            "temperature": 0,
            "avg_logprob": -0.14755116,
            "compression_ratio": 1.6157025,
            "no_speech_prob": 2.4087678e-12
        },
        {
            "id": 17,
            "seek": 8512,
            "start": 90.4,
            "end": 94.84,
            "text": " second most important principle is the open closed principle. It says software",
            "tokens": [
                50629,
                1150,
                881,
                1021,
                8665,
                307,
                264,
                1269,
                5395,
                8665,
                13,
                467,
                1619,
                4722,
                50851
            ],
            "temperature": 0,
            "avg_logprob": -0.14755116,
            "compression_ratio": 1.6157025,
            "no_speech_prob": 2.4087678e-12
        },
        {
            "id": 18,
            "seek": 8512,
            "start": 94.84,
            "end": 99.34,
            "text": " entity should be open for extension but closed for modification. What does that",
            "tokens": [
                50851,
                13977,
                820,
                312,
                1269,
                337,
                10320,
                457,
                5395,
                337,
                26747,
                13,
                708,
                775,
                300,
                51076
            ],
            "temperature": 0,
            "avg_logprob": -0.14755116,
            "compression_ratio": 1.6157025,
            "no_speech_prob": 2.4087678e-12
        },
        {
            "id": 19,
            "seek": 8512,
            "start": 99.34,
            "end": 105.1,
            "text": " mean? Look at this implementation of calculating area for a shape. Here's",
            "tokens": [
                51076,
                914,
                30,
                2053,
                412,
                341,
                11420,
                295,
                28258,
                1859,
                337,
                257,
                3909,
                13,
                1692,
                311,
                51364
            ],
            "temperature": 0,
            "avg_logprob": -0.14755116,
            "compression_ratio": 1.6157025,
            "no_speech_prob": 2.4087678e-12
        },
        {
            "id": 20,
            "seek": 8512,
            "start": 105.1,
            "end": 109,
            "text": " passing in an array of shapes and we are checking if a shape is rectangle then do",
            "tokens": [
                51364,
                8437,
                294,
                364,
                10225,
                295,
                10854,
                293,
                321,
                366,
                8568,
                498,
                257,
                3909,
                307,
                21930,
                550,
                360,
                51559
            ],
            "temperature": 0,
            "avg_logprob": -0.14755116,
            "compression_ratio": 1.6157025,
            "no_speech_prob": 2.4087678e-12
        },
        {
            "id": 21,
            "seek": 10900,
            "start": 109,
            "end": 119,
            "text": " else do this. What if I have to add a few more shapes? All the logic would be centralized in this specific piece of code.",
            "tokens": [
                50365,
                1646,
                360,
                341,
                13,
                708,
                498,
                286,
                362,
                281,
                909,
                257,
                1326,
                544,
                10854,
                30,
                1057,
                264,
                9952,
                576,
                312,
                32395,
                294,
                341,
                2685,
                2522,
                295,
                3089,
                13,
                50865
            ],
            "temperature": 0,
            "avg_logprob": -0.25136042,
            "compression_ratio": 1.5757576,
            "no_speech_prob": 1.567466e-12
        },
        {
            "id": 22,
            "seek": 119,
            "start": 119,
            "end": 133.90524,
            "text": " So whenever I add a new object then I should start modifying all the code which is present in the area method Now what would be a better solution A better solution would be allowing each of the shapes to define their own area methods",
            "tokens": [
                50865,
                407,
                5699,
                286,
                909,
                257,
                777,
                2657,
                11,
                550,
                286,
                820,
                722,
                42626,
                439,
                264,
                3089,
                597,
                307,
                1974,
                294,
                264,
                1859,
                3170,
                13,
                50722,
                50749,
                823,
                11,
                437,
                576,
                312,
                257,
                1101,
                3827,
                30,
                50824,
                50838,
                316,
                1101,
                3827,
                576,
                312,
                8293,
                1184,
                295,
                264,
                10854,
                281,
                6964,
                641,
                1065,
                1859,
                7150,
                13,
                51110
            ],
            "temperature": 0,
            "avg_logprob": -0.17040014,
            "compression_ratio": 1.7925311,
            "no_speech_prob": 1.8468692e-12
        },
        {
            "id": 23,
            "seek": 119,
            "start": 134.30525,
            "end": 136.48524,
            "text": " So here we are creating an abstract class called shape.",
            "tokens": [
                51130,
                407,
                510,
                321,
                366,
                4084,
                364,
                12649,
                1508,
                1219,
                3909,
                13,
                51239
            ],
            "temperature": 0,
            "avg_logprob": -0.17040014,
            "compression_ratio": 1.7925311,
            "no_speech_prob": 1.8468692e-12
        },
        {
            "id": 24,
            "seek": 119,
            "start": 136.68524,
            "end": 137.82526,
            "text": " This could also be an interface.",
            "tokens": [
                51249,
                639,
                727,
                611,
                312,
                364,
                9226,
                13,
                51306
            ],
            "temperature": 0,
            "avg_logprob": -0.17040014,
            "compression_ratio": 1.7925311,
            "no_speech_prob": 1.8468692e-12
        },
        {
            "id": 25,
            "seek": 119,
            "start": 138.58525,
            "end": 147.12524,
            "text": " And we are creating an area method inside the rectangle class, implementing the abstract method in here.",
            "tokens": [
                51344,
                400,
                321,
                366,
                4084,
                364,
                1859,
                3170,
                1854,
                264,
                21930,
                1508,
                11,
                18114,
                264,
                12649,
                3170,
                294,
                510,
                13,
                51771
            ],
            "temperature": 0,
            "avg_logprob": -0.17040014,
            "compression_ratio": 1.7925311,
            "no_speech_prob": 1.8468692e-12
        },
        {
            "id": 26,
            "seek": 2931,
            "start": 147.12524,
            "end": 155.42525,
            "text": " The area method would only be responsible for looping around them and calling the area method on the specific shape.",
            "tokens": [
                50365,
                440,
                1859,
                3170,
                576,
                787,
                312,
                6250,
                337,
                6367,
                278,
                926,
                552,
                293,
                5141,
                264,
                1859,
                3170,
                322,
                264,
                2685,
                3909,
                13,
                50780
            ],
            "temperature": 0,
            "avg_logprob": -0.18017802,
            "compression_ratio": 1.9151785,
            "no_speech_prob": 1.9279964e-12
        },
        {
            "id": 27,
            "seek": 2931,
            "start": 156.02525,
            "end": 163.30525,
            "text": " So this area method is now having only the logic to loop around the shapes and add the areas in.",
            "tokens": [
                50810,
                407,
                341,
                1859,
                3170,
                307,
                586,
                1419,
                787,
                264,
                9952,
                281,
                6367,
                926,
                264,
                10854,
                293,
                909,
                264,
                3179,
                294,
                13,
                51174
            ],
            "temperature": 0,
            "avg_logprob": -0.18017802,
            "compression_ratio": 1.9151785,
            "no_speech_prob": 1.9279964e-12
        },
        {
            "id": 28,
            "seek": 2931,
            "start": 163.64525,
            "end": 166.26524,
            "text": " This is a very good example of open close principle.",
            "tokens": [
                51191,
                639,
                307,
                257,
                588,
                665,
                1365,
                295,
                1269,
                1998,
                8665,
                13,
                51322
            ],
            "temperature": 0,
            "avg_logprob": -0.18017802,
            "compression_ratio": 1.9151785,
            "no_speech_prob": 1.9279964e-12
        },
        {
            "id": 29,
            "seek": 2931,
            "start": 166.26524,
            "end": 171.56525,
            "text": " Now if you want to add a new shape you don't really need to change the area method.",
            "tokens": [
                51322,
                823,
                498,
                291,
                528,
                281,
                909,
                257,
                777,
                3909,
                291,
                500,
                380,
                534,
                643,
                281,
                1319,
                264,
                1859,
                3170,
                13,
                51587
            ],
            "temperature": 0,
            "avg_logprob": -0.18017802,
            "compression_ratio": 1.9151785,
            "no_speech_prob": 1.9279964e-12
        },
        {
            "id": 30,
            "seek": 2931,
            "start": 172.08525,
            "end": 175.02525,
            "text": " So this area method is closed for modification.",
            "tokens": [
                51613,
                407,
                341,
                1859,
                3170,
                307,
                5395,
                337,
                26747,
                13,
                51760
            ],
            "temperature": 0,
            "avg_logprob": -0.18017802,
            "compression_ratio": 1.9151785,
            "no_speech_prob": 1.9279964e-12
        },
        {
            "id": 31,
            "seek": 2931,
            "start": 175.40524,
            "end": 176.72525,
            "text": " You don't need to change this.",
            "tokens": [
                51779,
                509,
                500,
                380,
                643,
                281,
                1319,
                341,
                13,
                51845
            ],
            "temperature": 0,
            "avg_logprob": -0.18017802,
            "compression_ratio": 1.9151785,
            "no_speech_prob": 1.9279964e-12
        },
        {
            "id": 32,
            "seek": 5891,
            "start": 176.72525,
            "end": 186.78525,
            "text": " But we are open for extension because whenever you would want to create a new shape, all that you need to do is to create the shape and define the area method inside it.",
            "tokens": [
                50365,
                583,
                321,
                366,
                1269,
                337,
                10320,
                570,
                5699,
                291,
                576,
                528,
                281,
                1884,
                257,
                777,
                3909,
                11,
                439,
                300,
                291,
                643,
                281,
                360,
                307,
                281,
                1884,
                264,
                3909,
                293,
                6964,
                264,
                1859,
                3170,
                1854,
                309,
                13,
                50868
            ],
            "temperature": 0,
            "avg_logprob": -0.1239061,
            "compression_ratio": 1.7920792,
            "no_speech_prob": 4.8655077e-12
        },
        {
            "id": 33,
            "seek": 5891,
            "start": 186.96524,
            "end": 193.24524,
            "text": " So we are open for extension, open for new shapes, but we are closed for modification.",
            "tokens": [
                50877,
                407,
                321,
                366,
                1269,
                337,
                10320,
                11,
                1269,
                337,
                777,
                10854,
                11,
                457,
                321,
                366,
                5395,
                337,
                26747,
                13,
                51191
            ],
            "temperature": 0,
            "avg_logprob": -0.1239061,
            "compression_ratio": 1.7920792,
            "no_speech_prob": 4.8655077e-12
        },
        {
            "id": 34,
            "seek": 5891,
            "start": 193.86525,
            "end": 196.10526,
            "text": " We don't really need to change the area method.",
            "tokens": [
                51222,
                492,
                500,
                380,
                534,
                643,
                281,
                1319,
                264,
                1859,
                3170,
                13,
                51334
            ],
            "temperature": 0,
            "avg_logprob": -0.1239061,
            "compression_ratio": 1.7920792,
            "no_speech_prob": 4.8655077e-12
        },
        {
            "id": 35,
            "seek": 5891,
            "start": 196.38525,
            "end": 199.44525,
            "text": " The third principle is the Liskov substitution principle.",
            "tokens": [
                51348,
                440,
                2636,
                8665,
                307,
                264,
                30812,
                33516,
                35827,
                8665,
                13,
                51501
            ],
            "temperature": 0,
            "avg_logprob": -0.1239061,
            "compression_ratio": 1.7920792,
            "no_speech_prob": 4.8655077e-12
        },
        {
            "id": 36,
            "seek": 8163,
            "start": 199.44525,
            "end": 212.08525,
            "text": " One of the things people tend to do in object-oriented programming is try and use inheritance even when it's not really the right thing to do just for the sake of reusing the code.",
            "tokens": [
                50365,
                1485,
                295,
                264,
                721,
                561,
                3928,
                281,
                360,
                294,
                2657,
                12,
                27414,
                9410,
                307,
                853,
                293,
                764,
                32122,
                754,
                562,
                309,
                311,
                406,
                534,
                264,
                558,
                551,
                281,
                360,
                445,
                337,
                264,
                9717,
                295,
                319,
                7981,
                264,
                3089,
                13,
                50997
            ],
            "temperature": 0,
            "avg_logprob": -0.105994634,
            "compression_ratio": 1.7730769,
            "no_speech_prob": 2.564043e-12
        },
        {
            "id": 37,
            "seek": 8163,
            "start": 212.60526,
            "end": 217.78525,
            "text": " Liskov substitution principle says subtypes must be substitutable for their base types.",
            "tokens": [
                51023,
                30812,
                33516,
                35827,
                8665,
                1619,
                1422,
                874,
                5190,
                1633,
                312,
                26441,
                32148,
                337,
                641,
                3096,
                3467,
                13,
                51282
            ],
            "temperature": 0,
            "avg_logprob": -0.105994634,
            "compression_ratio": 1.7730769,
            "no_speech_prob": 2.564043e-12
        },
        {
            "id": 38,
            "seek": 8163,
            "start": 218.58525,
            "end": 219.92525,
            "text": " Let's consider an example.",
            "tokens": [
                51322,
                961,
                311,
                1949,
                364,
                1365,
                13,
                51389
            ],
            "temperature": 0,
            "avg_logprob": -0.105994634,
            "compression_ratio": 1.7730769,
            "no_speech_prob": 2.564043e-12
        },
        {
            "id": 39,
            "seek": 8163,
            "start": 220.12524,
            "end": 228.26526,
            "text": " Let's say there's a rectangle class and we have a set width and the set height method which is implemented and we have a get height and the get width method as well.",
            "tokens": [
                51399,
                961,
                311,
                584,
                456,
                311,
                257,
                21930,
                1508,
                293,
                321,
                362,
                257,
                992,
                11402,
                293,
                264,
                992,
                6681,
                3170,
                597,
                307,
                12270,
                293,
                321,
                362,
                257,
                483,
                6681,
                293,
                264,
                483,
                11402,
                3170,
                382,
                731,
                13,
                51806
            ],
            "temperature": 0,
            "avg_logprob": -0.105994634,
            "compression_ratio": 1.7730769,
            "no_speech_prob": 2.564043e-12
        },
        {
            "id": 40,
            "seek": 11045,
            "start": 228.26526,
            "end": 231.54526,
            "text": " And now there is a new requirement to implement a square class.",
            "tokens": [
                50365,
                400,
                586,
                456,
                307,
                257,
                777,
                11695,
                281,
                4445,
                257,
                3732,
                1508,
                13,
                50529
            ],
            "temperature": 0,
            "avg_logprob": -0.13848208,
            "compression_ratio": 1.9353234,
            "no_speech_prob": 1.6235328e-12
        },
        {
            "id": 41,
            "seek": 11045,
            "start": 232.12524,
            "end": 239.08525,
            "text": " And what I do is instead of trying to implement a square class on its own, I would try and extend the rectangle class.",
            "tokens": [
                50558,
                400,
                437,
                286,
                360,
                307,
                2602,
                295,
                1382,
                281,
                4445,
                257,
                3732,
                1508,
                322,
                1080,
                1065,
                11,
                286,
                576,
                853,
                293,
                10101,
                264,
                21930,
                1508,
                13,
                50906
            ],
            "temperature": 0,
            "avg_logprob": -0.13848208,
            "compression_ratio": 1.9353234,
            "no_speech_prob": 1.6235328e-12
        },
        {
            "id": 42,
            "seek": 243,
            "start": 239.24524,
            "end": 254.5905,
            "text": " So let say I would say square extends rectangle and I create a set width method where I would set both height and width to W And I would do the set height method where it sets both height and width to H Is that a good implementation",
            "tokens": [
                50914,
                407,
                718,
                311,
                584,
                286,
                576,
                584,
                3732,
                26448,
                21930,
                293,
                286,
                1884,
                257,
                992,
                11402,
                3170,
                689,
                286,
                576,
                992,
                1293,
                6681,
                293,
                11402,
                281,
                343,
                13,
                51274,
                51295,
                400,
                286,
                576,
                360,
                264,
                992,
                6681,
                3170,
                689,
                309,
                6352,
                1293,
                6681,
                293,
                11402,
                281,
                343,
                293,
                286,
                576,
                360,
                264,
                992,
                6681,
                50626,
                50626,
                3170,
                689,
                309,
                6352,
                1293,
                6681,
                293,
                11402,
                281,
                389,
                13,
                1119,
                300,
                257,
                665,
                11420,
                30,
                50944
            ],
            "temperature": 0,
            "avg_logprob": -0.17659493,
            "compression_ratio": 1.7174888,
            "no_speech_prob": 1.4956562e-12
        },
        {
            "id": 43,
            "seek": 243,
            "start": 254.5905,
            "end": 260.1705,
            "text": " Liskov substitution principle says it's a bad implementation. Consider a piece of",
            "tokens": [
                50944,
                30812,
                33516,
                35827,
                8665,
                1619,
                309,
                311,
                257,
                1578,
                11420,
                13,
                17416,
                257,
                2522,
                295,
                51223
            ],
            "temperature": 0,
            "avg_logprob": -0.17659493,
            "compression_ratio": 1.7174888,
            "no_speech_prob": 1.4956562e-12
        },
        {
            "id": 44,
            "seek": 243,
            "start": 260.1705,
            "end": 264.2505,
            "text": " code like this right so if somebody wants to test a rectangle let's say this",
            "tokens": [
                51223,
                3089,
                411,
                341,
                558,
                370,
                498,
                2618,
                2738,
                281,
                1500,
                257,
                21930,
                718,
                311,
                584,
                341,
                51427
            ],
            "temperature": 0,
            "avg_logprob": -0.17659493,
            "compression_ratio": 1.7174888,
            "no_speech_prob": 1.4956562e-12
        },
        {
            "id": 45,
            "seek": 243,
            "start": 264.2505,
            "end": 268.5105,
            "text": " is the method which is written r.setWidth5 setHeight5 and he's",
            "tokens": [
                51427,
                307,
                264,
                3170,
                597,
                307,
                3720,
                367,
                13,
                3854,
                54,
                327,
                392,
                20,
                992,
                5205,
                397,
                20,
                293,
                415,
                311,
                51640
            ],
            "temperature": 0,
            "avg_logprob": -0.17659493,
            "compression_ratio": 1.7174888,
            "no_speech_prob": 1.4956562e-12
        },
        {
            "id": 46,
            "seek": 2793,
            "start": 268.5105,
            "end": 276.1105,
            "text": " checking if the area is 5 into 4 will the square class pass this test the answer is no because",
            "tokens": [
                50365,
                8568,
                498,
                264,
                1859,
                307,
                1025,
                666,
                1017,
                486,
                264,
                3732,
                1508,
                1320,
                341,
                1500,
                264,
                1867,
                307,
                572,
                570,
                50745
            ],
            "temperature": 0,
            "avg_logprob": -0.07716216,
            "compression_ratio": 1.9545455,
            "no_speech_prob": 1.6171992e-12
        },
        {
            "id": 47,
            "seek": 2793,
            "start": 276.1105,
            "end": 281.3305,
            "text": " your set height is actually setting both height and width to the same value as h so what would",
            "tokens": [
                50745,
                428,
                992,
                6681,
                307,
                767,
                3287,
                1293,
                6681,
                293,
                11402,
                281,
                264,
                912,
                2158,
                382,
                276,
                370,
                437,
                576,
                51006
            ],
            "temperature": 0,
            "avg_logprob": -0.07716216,
            "compression_ratio": 1.9545455,
            "no_speech_prob": 1.6171992e-12
        },
        {
            "id": 48,
            "seek": 2793,
            "start": 281.3305,
            "end": 289.3905,
            "text": " happen is set height 4 will set both height and width to 4 so the area would be 4 into 4 and it",
            "tokens": [
                51006,
                1051,
                307,
                992,
                6681,
                1017,
                486,
                992,
                1293,
                6681,
                293,
                11402,
                281,
                1017,
                370,
                264,
                1859,
                576,
                312,
                1017,
                666,
                1017,
                293,
                309,
                51409
            ],
            "temperature": 0,
            "avg_logprob": -0.07716216,
            "compression_ratio": 1.9545455,
            "no_speech_prob": 1.6171992e-12
        },
        {
            "id": 49,
            "seek": 2793,
            "start": 289.3905,
            "end": 296.2705,
            "text": " will not be 5 into 4 you should always be careful when you use inheritance you should use inheritance",
            "tokens": [
                51409,
                486,
                406,
                312,
                1025,
                666,
                1017,
                291,
                820,
                1009,
                312,
                5026,
                562,
                291,
                764,
                32122,
                291,
                820,
                764,
                32122,
                51753
            ],
            "temperature": 0,
            "avg_logprob": -0.07716216,
            "compression_ratio": 1.9545455,
            "no_speech_prob": 1.6171992e-12
        },
        {
            "id": 50,
            "seek": 5569,
            "start": 296.2705,
            "end": 303.6305,
            "text": " only when your super class is replaceable by a subclass in all the instances. Don't use",
            "tokens": [
                50365,
                787,
                562,
                428,
                1687,
                1508,
                307,
                7406,
                712,
                538,
                257,
                1422,
                11665,
                294,
                439,
                264,
                14519,
                13,
                1468,
                380,
                764,
                50733
            ],
            "temperature": 0,
            "avg_logprob": -0.09654953,
            "compression_ratio": 1.6478261,
            "no_speech_prob": 2.271635e-12
        },
        {
            "id": 51,
            "seek": 5569,
            "start": 303.6305,
            "end": 309.7905,
            "text": " inheritance just to save a few lines of code. The fourth principle we would be talking about is",
            "tokens": [
                50733,
                32122,
                445,
                281,
                3155,
                257,
                1326,
                3876,
                295,
                3089,
                13,
                440,
                6409,
                8665,
                321,
                576,
                312,
                1417,
                466,
                307,
                51041
            ],
            "temperature": 0,
            "avg_logprob": -0.09654953,
            "compression_ratio": 1.6478261,
            "no_speech_prob": 2.271635e-12
        },
        {
            "id": 52,
            "seek": 5569,
            "start": 309.7905,
            "end": 316.0305,
            "text": " called the interface segregation principle. When two systems or two classes are talking to each",
            "tokens": [
                51041,
                1219,
                264,
                9226,
                34317,
                8665,
                13,
                1133,
                732,
                3652,
                420,
                732,
                5359,
                366,
                1417,
                281,
                1184,
                51353
            ],
            "temperature": 0,
            "avg_logprob": -0.09654953,
            "compression_ratio": 1.6478261,
            "no_speech_prob": 2.271635e-12
        },
        {
            "id": 53,
            "seek": 5569,
            "start": 316.0305,
            "end": 323.3105,
            "text": " other then they should have the smallest possible interface that is defined. Why is that important?",
            "tokens": [
                51353,
                661,
                550,
                436,
                820,
                362,
                264,
                16998,
                1944,
                9226,
                300,
                307,
                7642,
                13,
                1545,
                307,
                300,
                1021,
                30,
                51717
            ],
            "temperature": 0,
            "avg_logprob": -0.09654953,
            "compression_ratio": 1.6478261,
            "no_speech_prob": 2.271635e-12
        },
        {
            "id": 54,
            "seek": 8273,
            "start": 323.3105,
            "end": 329.1105,
            "text": " Let's take an example. Let's say I have an animal interface which is having an abstract feed method.",
            "tokens": [
                50365,
                961,
                311,
                747,
                364,
                1365,
                13,
                961,
                311,
                584,
                286,
                362,
                364,
                5496,
                9226,
                597,
                307,
                1419,
                364,
                12649,
                3154,
                3170,
                13,
                50655
            ],
            "temperature": 0,
            "avg_logprob": -0.19872844,
            "compression_ratio": 1.9055794,
            "no_speech_prob": 3.863807e-12
        },
        {
            "id": 55,
            "seek": 8273,
            "start": 329.1105,
            "end": 333.4505,
            "text": " We are creating two classes dog and tiger. Implement the feed method.",
            "tokens": [
                50655,
                492,
                366,
                4084,
                732,
                5359,
                3000,
                293,
                21432,
                13,
                4331,
                43704,
                264,
                3154,
                3170,
                13,
                50872
            ],
            "temperature": 0,
            "avg_logprob": -0.19872844,
            "compression_ratio": 1.9055794,
            "no_speech_prob": 3.863807e-12
        },
        {
            "id": 56,
            "seek": 8273,
            "start": 333.4505,
            "end": 336.9905,
            "text": " Let's say now I would need to add a feature to groom.",
            "tokens": [
                50872,
                961,
                311,
                584,
                586,
                286,
                576,
                643,
                281,
                909,
                257,
                4111,
                281,
                22198,
                13,
                51049
            ],
            "temperature": 0,
            "avg_logprob": -0.19872844,
            "compression_ratio": 1.9055794,
            "no_speech_prob": 3.863807e-12
        },
        {
            "id": 57,
            "seek": 8273,
            "start": 336.9905,
            "end": 340.87048,
            "text": " What would happen if I add the groom method to the animal interface?",
            "tokens": [
                51049,
                708,
                576,
                1051,
                498,
                286,
                909,
                264,
                22198,
                3170,
                281,
                264,
                5496,
                9226,
                30,
                51243
            ],
            "temperature": 0,
            "avg_logprob": -0.19872844,
            "compression_ratio": 1.9055794,
            "no_speech_prob": 3.863807e-12
        },
        {
            "id": 58,
            "seek": 8273,
            "start": 340.87048,
            "end": 347.37048,
            "text": " What would happen is the dog and the tiger need to implement the groom method.",
            "tokens": [
                51243,
                708,
                576,
                1051,
                307,
                264,
                3000,
                293,
                264,
                21432,
                643,
                281,
                4445,
                264,
                22198,
                3170,
                13,
                51568
            ],
            "temperature": 0,
            "avg_logprob": -0.19872844,
            "compression_ratio": 1.9055794,
            "no_speech_prob": 3.863807e-12
        },
        {
            "id": 59,
            "seek": 8273,
            "start": 347.37048,
            "end": 351.3305,
            "text": " Groom is something which should only be applicable to domestic animals.",
            "tokens": [
                51568,
                460,
                2861,
                307,
                746,
                597,
                820,
                787,
                312,
                21142,
                281,
                10939,
                4882,
                13,
                51766
            ],
            "temperature": 0,
            "avg_logprob": -0.19872844,
            "compression_ratio": 1.9055794,
            "no_speech_prob": 3.863807e-12
        },
        {
            "id": 60,
            "seek": 11075,
            "start": 351.3305,
            "end": 358.93048,
            "text": " So I can groom a dog, but for a tiger, I am providing a dummy implementation just to keep the compiler happy.",
            "tokens": [
                50365,
                407,
                286,
                393,
                22198,
                257,
                3000,
                11,
                457,
                337,
                257,
                21432,
                11,
                286,
                669,
                6530,
                257,
                35064,
                11420,
                445,
                281,
                1066,
                264,
                31958,
                2055,
                13,
                50745
            ],
            "temperature": 0,
            "avg_logprob": -0.2191217,
            "compression_ratio": 1.7621145,
            "no_speech_prob": 1.7614777e-12
        },
        {
            "id": 61,
            "seek": 11075,
            "start": 358.93048,
            "end": 361.93048,
            "text": " Is that good implementation? The answer is no.",
            "tokens": [
                50745,
                1119,
                300,
                665,
                11420,
                30,
                440,
                1867,
                307,
                572,
                13,
                50895
            ],
            "temperature": 0,
            "avg_logprob": -0.2191217,
            "compression_ratio": 1.7621145,
            "no_speech_prob": 1.7614777e-12
        },
        {
            "id": 62,
            "seek": 11075,
            "start": 361.93048,
            "end": 366.93048,
            "text": " The ideal way to handle that would have been to create another interface called pet.",
            "tokens": [
                50895,
                440,
                7157,
                636,
                281,
                4813,
                300,
                576,
                362,
                668,
                281,
                1884,
                1071,
                9226,
                1219,
                3817,
                13,
                51145
            ],
            "temperature": 0,
            "avg_logprob": -0.2191217,
            "compression_ratio": 1.7621145,
            "no_speech_prob": 1.7614777e-12
        },
        {
            "id": 63,
            "seek": 367,
            "start": 366.93048,
            "end": 378.07574,
            "text": " Instead of adding features to the existing interface it better to create a new interface called pet extending the existing interface and adding the groom method in",
            "tokens": [
                51145,
                7156,
                295,
                5127,
                4122,
                281,
                264,
                6741,
                9226,
                11,
                309,
                311,
                1101,
                281,
                1884,
                257,
                777,
                9226,
                1219,
                3817,
                11,
                24360,
                264,
                6741,
                9226,
                293,
                5127,
                264,
                22198,
                3170,
                294,
                13,
                50918
            ],
            "temperature": 0,
            "avg_logprob": -0.14661682,
            "compression_ratio": 1.8256881,
            "no_speech_prob": 2.2190162e-12
        },
        {
            "id": 64,
            "seek": 367,
            "start": 378.07574,
            "end": 386.59573,
            "text": " The dog can extend the pet interface because groom is applicable to it, but tiger would continue to extend the animal interface.",
            "tokens": [
                50918,
                440,
                3000,
                393,
                10101,
                264,
                3817,
                9226,
                570,
                22198,
                307,
                21142,
                281,
                309,
                11,
                457,
                21432,
                576,
                2354,
                281,
                10101,
                264,
                5496,
                9226,
                13,
                51344
            ],
            "temperature": 0,
            "avg_logprob": -0.14661682,
            "compression_ratio": 1.8256881,
            "no_speech_prob": 2.2190162e-12
        },
        {
            "id": 65,
            "seek": 367,
            "start": 386.97574,
            "end": 389.57574,
            "text": " That's what interface segregation principle is all about.",
            "tokens": [
                51363,
                663,
                311,
                437,
                9226,
                34317,
                8665,
                307,
                439,
                466,
                13,
                51493
            ],
            "temperature": 0,
            "avg_logprob": -0.14661682,
            "compression_ratio": 1.8256881,
            "no_speech_prob": 2.2190162e-12
        },
        {
            "id": 66,
            "seek": 367,
            "start": 390.07574,
            "end": 393.47574,
            "text": " Keep your interfaces as small as possible.",
            "tokens": [
                51518,
                5527,
                428,
                28416,
                382,
                1359,
                382,
                1944,
                13,
                51688
            ],
            "temperature": 0,
            "avg_logprob": -0.14661682,
            "compression_ratio": 1.8256881,
            "no_speech_prob": 2.2190162e-12
        },
        {
            "id": 67,
            "seek": 3013,
            "start": 393.47574,
            "end": 398.91574,
            "text": " the moment you have fat interfaces with a lot of methods then every time you",
            "tokens": [
                50365,
                264,
                1623,
                291,
                362,
                4046,
                28416,
                365,
                257,
                688,
                295,
                7150,
                550,
                633,
                565,
                291,
                50637
            ],
            "temperature": 0,
            "avg_logprob": -0.1282152,
            "compression_ratio": 1.8169014,
            "no_speech_prob": 2.6870802e-12
        },
        {
            "id": 68,
            "seek": 3013,
            "start": 398.91574,
            "end": 403.83575,
            "text": " change the interface then it means that all the implementing classes also should",
            "tokens": [
                50637,
                1319,
                264,
                9226,
                550,
                309,
                1355,
                300,
                439,
                264,
                18114,
                5359,
                611,
                820,
                50883
            ],
            "temperature": 0,
            "avg_logprob": -0.1282152,
            "compression_ratio": 1.8169014,
            "no_speech_prob": 2.6870802e-12
        },
        {
            "id": 69,
            "seek": 3013,
            "start": 403.83575,
            "end": 407.85574,
            "text": " change the fifth principle that we would be talking about is the dependency",
            "tokens": [
                50883,
                1319,
                264,
                9266,
                8665,
                300,
                321,
                576,
                312,
                1417,
                466,
                307,
                264,
                33621,
                51084
            ],
            "temperature": 0,
            "avg_logprob": -0.1282152,
            "compression_ratio": 1.8169014,
            "no_speech_prob": 2.6870802e-12
        },
        {
            "id": 70,
            "seek": 3013,
            "start": 407.85574,
            "end": 414.31573,
            "text": " inversion principle it says depend upon interfaces or abstractions rather than",
            "tokens": [
                51084,
                43576,
                8665,
                309,
                1619,
                5672,
                3564,
                28416,
                420,
                12649,
                626,
                2831,
                813,
                51407
            ],
            "temperature": 0,
            "avg_logprob": -0.1282152,
            "compression_ratio": 1.8169014,
            "no_speech_prob": 2.6870802e-12
        },
        {
            "id": 71,
            "seek": 3013,
            "start": 414.31573,
            "end": 420.09576,
            "text": " concrete classes what does that mean let's look at an example look at this",
            "tokens": [
                51407,
                9859,
                5359,
                437,
                775,
                300,
                914,
                718,
                311,
                574,
                412,
                364,
                1365,
                574,
                412,
                341,
                51696
            ],
            "temperature": 0,
            "avg_logprob": -0.1282152,
            "compression_ratio": 1.8169014,
            "no_speech_prob": 2.6870802e-12
        },
        {
            "id": 72,
            "seek": 5675,
            "start": 420.09576,
            "end": 426.03574,
            "text": " implementation of the copy method what it's doing is based on the output device",
            "tokens": [
                50365,
                11420,
                295,
                264,
                5055,
                3170,
                437,
                309,
                311,
                884,
                307,
                2361,
                322,
                264,
                5598,
                4302,
                50662
            ],
            "temperature": 0,
            "avg_logprob": -0.095346205,
            "compression_ratio": 1.987013,
            "no_speech_prob": 1.2991415e-12
        },
        {
            "id": 73,
            "seek": 5675,
            "start": 426.03574,
            "end": 430.59576,
            "text": " which is passed in which could be printer or a disk whatever is read from",
            "tokens": [
                50662,
                597,
                307,
                4678,
                294,
                597,
                727,
                312,
                16671,
                420,
                257,
                12355,
                2035,
                307,
                1401,
                490,
                50890
            ],
            "temperature": 0,
            "avg_logprob": -0.095346205,
            "compression_ratio": 1.987013,
            "no_speech_prob": 1.2991415e-12
        },
        {
            "id": 74,
            "seek": 5675,
            "start": 430.59576,
            "end": 435.09576,
            "text": " the keyboard it would be written down to the output device so you can see the",
            "tokens": [
                50890,
                264,
                10186,
                309,
                576,
                312,
                3720,
                760,
                281,
                264,
                5598,
                4302,
                370,
                291,
                393,
                536,
                264,
                51115
            ],
            "temperature": 0,
            "avg_logprob": -0.095346205,
            "compression_ratio": 1.987013,
            "no_speech_prob": 1.2991415e-12
        },
        {
            "id": 75,
            "seek": 5675,
            "start": 435.09576,
            "end": 438.69574,
            "text": " logic for it in here right so you read it from the keyboard and you are checking",
            "tokens": [
                51115,
                9952,
                337,
                309,
                294,
                510,
                558,
                370,
                291,
                1401,
                309,
                490,
                264,
                10186,
                293,
                291,
                366,
                8568,
                51295
            ],
            "temperature": 0,
            "avg_logprob": -0.095346205,
            "compression_ratio": 1.987013,
            "no_speech_prob": 1.2991415e-12
        },
        {
            "id": 76,
            "seek": 5675,
            "start": 438.69574,
            "end": 443.09576,
            "text": " if the output device is printer then write to printer else write to disk now",
            "tokens": [
                51295,
                498,
                264,
                5598,
                4302,
                307,
                16671,
                550,
                2464,
                281,
                16671,
                1646,
                2464,
                281,
                12355,
                586,
                51515
            ],
            "temperature": 0,
            "avg_logprob": -0.095346205,
            "compression_ratio": 1.987013,
            "no_speech_prob": 1.2991415e-12
        },
        {
            "id": 77,
            "seek": 5675,
            "start": 443.09576,
            "end": 446.95575,
            "text": " what is the problem with this the problem is as your number of output",
            "tokens": [
                51515,
                437,
                307,
                264,
                1154,
                365,
                341,
                264,
                1154,
                307,
                382,
                428,
                1230,
                295,
                5598,
                51708
            ],
            "temperature": 0,
            "avg_logprob": -0.095346205,
            "compression_ratio": 1.987013,
            "no_speech_prob": 1.2991415e-12
        },
        {
            "id": 78,
            "seek": 8361,
            "start": 446.95575,
            "end": 451.75574,
            "text": " devices increases this copy method needs to keep changing a better",
            "tokens": [
                50365,
                5759,
                8637,
                341,
                5055,
                3170,
                2203,
                281,
                1066,
                4473,
                257,
                1101,
                50605
            ],
            "temperature": 0,
            "avg_logprob": -0.097863935,
            "compression_ratio": 1.893401,
            "no_speech_prob": 2.0678964e-12
        },
        {
            "id": 79,
            "seek": 8361,
            "start": 451.75574,
            "end": 458.41574,
            "text": " implementation would be to create a simple interface like reader and have a",
            "tokens": [
                50605,
                11420,
                576,
                312,
                281,
                1884,
                257,
                2199,
                9226,
                411,
                15149,
                293,
                362,
                257,
                50938
            ],
            "temperature": 0,
            "avg_logprob": -0.097863935,
            "compression_ratio": 1.893401,
            "no_speech_prob": 2.0678964e-12
        },
        {
            "id": 80,
            "seek": 8361,
            "start": 458.41574,
            "end": 466.03574,
            "text": " interface writer and the copy method can write from any reader to any writer so",
            "tokens": [
                50938,
                9226,
                9936,
                293,
                264,
                5055,
                3170,
                393,
                2464,
                490,
                604,
                15149,
                281,
                604,
                9936,
                370,
                51319
            ],
            "temperature": 0,
            "avg_logprob": -0.097863935,
            "compression_ratio": 1.893401,
            "no_speech_prob": 2.0678964e-12
        },
        {
            "id": 81,
            "seek": 8361,
            "start": 466.03574,
            "end": 470.53574,
            "text": " the copy method does not change when you have a new writer or a new reader this",
            "tokens": [
                51319,
                264,
                5055,
                3170,
                775,
                406,
                1319,
                562,
                291,
                362,
                257,
                777,
                9936,
                420,
                257,
                777,
                15149,
                341,
                51544
            ],
            "temperature": 0,
            "avg_logprob": -0.097863935,
            "compression_ratio": 1.893401,
            "no_speech_prob": 2.0678964e-12
        },
        {
            "id": 82,
            "seek": 8361,
            "start": 470.53574,
            "end": 474.91574,
            "text": " is a good example of a dependency inversion principle in this video we",
            "tokens": [
                51544,
                307,
                257,
                665,
                1365,
                295,
                257,
                33621,
                43576,
                8665,
                294,
                341,
                960,
                321,
                51763
            ],
            "temperature": 0,
            "avg_logprob": -0.097863935,
            "compression_ratio": 1.893401,
            "no_speech_prob": 2.0678964e-12
        },
        {
            "id": 83,
            "seek": 11157,
            "start": 474.91574,
            "end": 479.47574,
            "text": " looked at solid principles the idea was just to quickly introduce you to all the",
            "tokens": [
                50365,
                2956,
                412,
                5100,
                9156,
                264,
                1558,
                390,
                445,
                281,
                2661,
                5366,
                291,
                281,
                439,
                264,
                50593
            ],
            "temperature": 0,
            "avg_logprob": -0.18586661,
            "compression_ratio": 1.9743589,
            "no_speech_prob": 2.534195e-12
        },
        {
            "id": 84,
            "seek": 11157,
            "start": 479.47574,
            "end": 484.21576,
            "text": " principles with a few code examples we looked at single responsibility principle",
            "tokens": [
                50593,
                9156,
                365,
                257,
                1326,
                3089,
                5110,
                321,
                2956,
                412,
                2167,
                6357,
                8665,
                50830
            ],
            "temperature": 0,
            "avg_logprob": -0.18586661,
            "compression_ratio": 1.9743589,
            "no_speech_prob": 2.534195e-12
        },
        {
            "id": 85,
            "seek": 11157,
            "start": 484.21576,
            "end": 487.27576,
            "text": " we looked at open close principle we looked at list code substitution",
            "tokens": [
                50830,
                321,
                2956,
                412,
                1269,
                1998,
                8665,
                321,
                2956,
                412,
                1329,
                3089,
                35827,
                50983
            ],
            "temperature": 0,
            "avg_logprob": -0.18586661,
            "compression_ratio": 1.9743589,
            "no_speech_prob": 2.534195e-12
        },
        {
            "id": 86,
            "seek": 11157,
            "start": 487.27576,
            "end": 491.39575,
            "text": " principle and we looked at interface segregation principle as well as the",
            "tokens": [
                50983,
                8665,
                293,
                321,
                2956,
                412,
                9226,
                34317,
                8665,
                382,
                731,
                382,
                264,
                51189
            ],
            "temperature": 0,
            "avg_logprob": -0.18586661,
            "compression_ratio": 1.9743589,
            "no_speech_prob": 2.534195e-12
        },
        {
            "id": 87,
            "seek": 11157,
            "start": 491.39575,
            "end": 497.67575,
            "text": " dependency inversion principle I'll see you in the next step until then bye bye",
            "tokens": [
                51189,
                33621,
                43576,
                8665,
                286,
                603,
                536,
                291,
                294,
                264,
                958,
                1823,
                1826,
                550,
                6543,
                6543,
                51503
            ],
            "temperature": 0,
            "avg_logprob": -0.18586661,
            "compression_ratio": 1.9743589,
            "no_speech_prob": 2.534195e-12
        }
    ],
    "x_groq": {
        "id": "req_01jsf10f1hf9ssb6z3rrtn4zh8"
    }
}