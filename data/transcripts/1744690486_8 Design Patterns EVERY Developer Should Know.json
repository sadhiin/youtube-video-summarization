{
    "text": " I heard you liked factories, so I made you a factory inside a factory which inherits from an abstract factory so it can create new factories. But enough about programming in Java. In this video, we will learn about eight design patterns every developer should know. In 1994, the Gang of Four released the Holy Book design patterns, introducing 23 object-oriented design patterns falling into one of three buckets. Creational patterns, structural patterns, and behavioral patterns. While some argue that it's dated, the fact that a 30-year-old book is still being discussed definitely means something, especially in a world where JavaScript frameworks are going out of style faster than you can say JavaScript was a mistake. Anyways, let's start with our first creational pattern, the factory. Imagine that you want a burger, but you don't want have to worry about getting all the ingredients and putting them together. So instead you just order a burger. Well we can do the same thing with code. If it takes a list of ingredients to create a burger, we can instead use a factory which will instantiate the burger for us and return it to us whether it's a cheeseburger, a deluxe cheeseburger, or even a vegan burger. All we have to do is tell the factory what kind of burger we want, just like you would do at a restaurant. But be careful because this way you'll never know what's inside the special sauce. We added a secret ingredient. It's semen. Now, alternatively, if you want a little more control over how the sausage is made, you can go with the builder pattern. The idea is that if we want to make a burger, we don't immediately have to pass in all the parameters. We can use a burger builder instead. We'll have an individual method for adding each ingredient, whether it's a bun, patty, or cheese, each one will return a reference to the builder. And finally, we'll have a build method, which will return the final product. Then we can instantiate a burger builder, add the buns that we want, the patty that we want, and the cheese that we want. And we can chain these methods because remember, each one will return a reference to the builder. Finally, we can build it and we have the exact burger that we want. I used this pattern a lot at Google with protocol buffers Next we have the singleton pattern And I not talking about my dating life A singleton is just a class that can only have a single instance of it that's instantiated. It has many use cases, for example, maintaining a single copy of our application state. We would start by having a static instance variable. Let's say in our app, we want to know if a user is logged in or not. But we won't use the constructor to actually instantiate the application state. We'll use a static method called getAppState, which will first check if there's already an existing instance of our application state. If not, we'll instantiate one. If there already is, though, we'll just return the existing instance. We'll never create more than one. So now if we get our app state for the first time, the logged in value will initially be false. But if we get the app state again, this will actually still be the first instance. So if we modify the first instance and then print the logged in value for both of them, they will both now be true. This pattern can be useful so that multiple components in your app will have a shared source of truth. But how can all the components listen for updates in real time? Well, that's where the observer comes in, our first behavioral pattern. I prefer to call it the PubSub pattern, it's widely used beyond just object-oriented programming, including in distributed systems. Let's take YouTube, for example. Every time I upload a video, all of my subscribers get a notification, including you, because you're subscribed, right? But in this case, the YouTube channel is the subject, aka publisher, which will be the source of events, such as a new video being uploaded. We might want multiple observers, aka subscribers, to all be notified when these events happen in real time. One way to implement this pattern is to have a YouTube channel class which maintains a list of its subscribers. When a new user subscribes, we add them to the list of subscribers. When an event occurs, we go through that list of subscribers and send the event data to each of them with a notification. But we also have to define the subscriber interface, which you can do with an abstract class or an interface Different subscribers might implement this interface differently but for a YouTube user let say that we just want to print the notification that was received So then we can create a YouTube channel add a few subscribers and we only have to call notify once and all of the subscribers will receive the notification. This is also extensible enough that a subscriber could be subscribed to multiple channels. An iterator is a pretty simple pattern that defines how the values in an object can be iterated through. In Python, just defining an array and then iterating through it with the in keyword uses the built-in list iterator. This way, we don't even have to index the array. Now, for more complex objects like binary search trees or linked lists, we can define our own. We can take a list node which just has a value and a next pointer, and then a linked list which has a head pointer and a current pointer. We can first define the iterator with the iter function, which will just set the current pointer to the head and then return a reference to the linked list. To get the next value in the sequence, we define the next function. If our current pointer is non-null, we can get the value and then return it and also shift the current pointer. But if we reach the end of the linked list, we can send a signal that we're going to stop iterating. To test it out, we can just initialize the linked list and iterate through it with the in keyword. This is a much more simple interface than having to actually update pointers ourselves. Now, if you want to modify or extend the behavior of a class without directly changing it, you can go with the strategy pattern. For example, we can filter an array by removing positive values, or we could filter it by removing all odd values. These are two strategies, but maybe in the future we want to add more. And we want to follow the open-closed principle. Well, we can define a filter strategy, create an implementation which will remove all negative values, and an implementation which which will remove all odd values. And then at runtime, we can pass this strategy into our values object. And to test it out, all we have to do is pass in the strategy into our filter method and we'll get our desired result. This way we can add additional strategies without modifying our values class Next we have the adapter our first structural pattern It analogous to the real world where we have a screw that too small to fit into a hole So instead, we use an adapter, which makes the screw compatible with the hole. Or maybe an example that you're more familiar with, we have a USB cable and a USB port. We can plug in the USB cable, which will directly fit into the port. But instead, if we have a micro USB cable, it's not compatible. So instead, we need a micro to USB adapter, which extends from the USB class, but is composed of a micro USB cable, which will be plugged into the adapter. We can override the plug USB method from our parent class if needed, but it's not in this case. And then we can plug our micro USB cable into the adapter and then plug it into the port, and it works just like a regular USB cable. And our last pattern is the facade. According to the dictionary, a facade is an outward appearance that is maintained to conceal a less pleasant or credible reality. In the programming world, the outward appearance is the class or interface we interact with as programmers, and the less pleasant reality is hopefully the complexity that is hidden from us. So a facade is simply a wrapper class that can be used to abstract lower-level details that we don't want to have to worry about. I'm surprised it even qualifies as a design pattern, but some common examples might include HTTP clients that abstract away low-level network details, or even arrays. Yes, a dynamic array like vectors in C++ or array lists in Java are constantly being resized under the hood. Thankfully, as programmers, we rarely have to think about memory allocation, though. If you're interested to learn more, check out my newly released object-oriented design interview course. We tackle some popular interview questions. I've included video lessons, written articles, and code for four languages, and I'll be sure to add additional lessons in the future. Thanks for watching, and make sure to subscribe, please.",
    "task": "transcribe",
    "language": "English",
    "duration": 586.91575,
    "segments": [
        {
            "id": 0,
            "seek": 0,
            "start": 0,
            "end": 5.48,
            "text": " I heard you liked factories, so I made you a factory inside a factory which inherits from an",
            "tokens": [
                50365,
                286,
                2198,
                291,
                4501,
                24813,
                11,
                370,
                286,
                1027,
                291,
                257,
                9265,
                1854,
                257,
                9265,
                597,
                9484,
                1208,
                490,
                364,
                50639
            ],
            "temperature": 0,
            "avg_logprob": -0.11355804,
            "compression_ratio": 1.5536481,
            "no_speech_prob": 6.9280893e-13
        },
        {
            "id": 1,
            "seek": 0,
            "start": 5.48,
            "end": 11.1,
            "text": " abstract factory so it can create new factories. But enough about programming in Java.",
            "tokens": [
                50639,
                12649,
                9265,
                370,
                309,
                393,
                1884,
                777,
                24813,
                13,
                583,
                1547,
                466,
                9410,
                294,
                10745,
                13,
                50920
            ],
            "temperature": 0,
            "avg_logprob": -0.11355804,
            "compression_ratio": 1.5536481,
            "no_speech_prob": 6.9280893e-13
        },
        {
            "id": 2,
            "seek": 0,
            "start": 12.54,
            "end": 17.56,
            "text": " In this video, we will learn about eight design patterns every developer should know.",
            "tokens": [
                50992,
                682,
                341,
                960,
                11,
                321,
                486,
                1466,
                466,
                3180,
                1715,
                8294,
                633,
                10754,
                820,
                458,
                13,
                51243
            ],
            "temperature": 0,
            "avg_logprob": -0.11355804,
            "compression_ratio": 1.5536481,
            "no_speech_prob": 6.9280893e-13
        },
        {
            "id": 3,
            "seek": 0,
            "start": 17.74,
            "end": 25.08,
            "text": " In 1994, the Gang of Four released the Holy Book design patterns, introducing 23 object-oriented",
            "tokens": [
                51252,
                682,
                22736,
                11,
                264,
                17984,
                295,
                7451,
                4736,
                264,
                6295,
                9476,
                1715,
                8294,
                11,
                15424,
                6673,
                2657,
                12,
                27414,
                51619
            ],
            "temperature": 0,
            "avg_logprob": -0.11355804,
            "compression_ratio": 1.5536481,
            "no_speech_prob": 6.9280893e-13
        },
        {
            "id": 4,
            "seek": 2508,
            "start": 25.08,
            "end": 31.14,
            "text": " design patterns falling into one of three buckets. Creational patterns, structural patterns,",
            "tokens": [
                50365,
                1715,
                8294,
                7440,
                666,
                472,
                295,
                1045,
                32191,
                13,
                9549,
                1478,
                8294,
                11,
                15067,
                8294,
                11,
                50668
            ],
            "temperature": 0,
            "avg_logprob": -0.05255055,
            "compression_ratio": 1.6901408,
            "no_speech_prob": 9.768413e-13
        },
        {
            "id": 5,
            "seek": 2508,
            "start": 31.44,
            "end": 36.86,
            "text": " and behavioral patterns. While some argue that it's dated, the fact that a 30-year-old book is",
            "tokens": [
                50683,
                293,
                19124,
                8294,
                13,
                3987,
                512,
                9695,
                300,
                309,
                311,
                23804,
                11,
                264,
                1186,
                300,
                257,
                2217,
                12,
                5294,
                12,
                2641,
                1446,
                307,
                50954
            ],
            "temperature": 0,
            "avg_logprob": -0.05255055,
            "compression_ratio": 1.6901408,
            "no_speech_prob": 9.768413e-13
        },
        {
            "id": 6,
            "seek": 2508,
            "start": 36.86,
            "end": 42.66,
            "text": " still being discussed definitely means something, especially in a world where JavaScript frameworks",
            "tokens": [
                50954,
                920,
                885,
                7152,
                2138,
                1355,
                746,
                11,
                2318,
                294,
                257,
                1002,
                689,
                15778,
                29834,
                51244
            ],
            "temperature": 0,
            "avg_logprob": -0.05255055,
            "compression_ratio": 1.6901408,
            "no_speech_prob": 9.768413e-13
        },
        {
            "id": 7,
            "seek": 2508,
            "start": 42.66,
            "end": 48.12,
            "text": " are going out of style faster than you can say JavaScript was a mistake. Anyways, let's start",
            "tokens": [
                51244,
                366,
                516,
                484,
                295,
                3758,
                4663,
                813,
                291,
                393,
                584,
                15778,
                390,
                257,
                6146,
                13,
                15585,
                11,
                718,
                311,
                722,
                51517
            ],
            "temperature": 0,
            "avg_logprob": -0.05255055,
            "compression_ratio": 1.6901408,
            "no_speech_prob": 9.768413e-13
        },
        {
            "id": 8,
            "seek": 2508,
            "start": 48.12,
            "end": 53.76,
            "text": " with our first creational pattern, the factory. Imagine that you want a burger, but you don't want",
            "tokens": [
                51517,
                365,
                527,
                700,
                1197,
                1478,
                5102,
                11,
                264,
                9265,
                13,
                11739,
                300,
                291,
                528,
                257,
                16393,
                11,
                457,
                291,
                500,
                380,
                528,
                51799
            ],
            "temperature": 0,
            "avg_logprob": -0.05255055,
            "compression_ratio": 1.6901408,
            "no_speech_prob": 9.768413e-13
        },
        {
            "id": 9,
            "seek": 5376,
            "start": 53.76,
            "end": 58.52,
            "text": " have to worry about getting all the ingredients and putting them together. So instead you just",
            "tokens": [
                50365,
                362,
                281,
                3292,
                466,
                1242,
                439,
                264,
                6952,
                293,
                3372,
                552,
                1214,
                13,
                407,
                2602,
                291,
                445,
                50603
            ],
            "temperature": 0,
            "avg_logprob": -0.041883938,
            "compression_ratio": 1.79927,
            "no_speech_prob": 9.692435e-13
        },
        {
            "id": 10,
            "seek": 5376,
            "start": 58.52,
            "end": 64.7,
            "text": " order a burger. Well we can do the same thing with code. If it takes a list of ingredients to create",
            "tokens": [
                50603,
                1668,
                257,
                16393,
                13,
                1042,
                321,
                393,
                360,
                264,
                912,
                551,
                365,
                3089,
                13,
                759,
                309,
                2516,
                257,
                1329,
                295,
                6952,
                281,
                1884,
                50912
            ],
            "temperature": 0,
            "avg_logprob": -0.041883938,
            "compression_ratio": 1.79927,
            "no_speech_prob": 9.692435e-13
        },
        {
            "id": 11,
            "seek": 5376,
            "start": 64.7,
            "end": 71.58,
            "text": " a burger, we can instead use a factory which will instantiate the burger for us and return it to us",
            "tokens": [
                50912,
                257,
                16393,
                11,
                321,
                393,
                2602,
                764,
                257,
                9265,
                597,
                486,
                9836,
                13024,
                264,
                16393,
                337,
                505,
                293,
                2736,
                309,
                281,
                505,
                51256
            ],
            "temperature": 0,
            "avg_logprob": -0.041883938,
            "compression_ratio": 1.79927,
            "no_speech_prob": 9.692435e-13
        },
        {
            "id": 12,
            "seek": 5376,
            "start": 71.58,
            "end": 77.82,
            "text": " whether it's a cheeseburger, a deluxe cheeseburger, or even a vegan burger. All we have to do is tell",
            "tokens": [
                51256,
                1968,
                309,
                311,
                257,
                5399,
                41787,
                11,
                257,
                1103,
                43344,
                5399,
                41787,
                11,
                420,
                754,
                257,
                12824,
                16393,
                13,
                1057,
                321,
                362,
                281,
                360,
                307,
                980,
                51568
            ],
            "temperature": 0,
            "avg_logprob": -0.041883938,
            "compression_ratio": 1.79927,
            "no_speech_prob": 9.692435e-13
        },
        {
            "id": 13,
            "seek": 5376,
            "start": 77.82,
            "end": 83.34,
            "text": " the factory what kind of burger we want, just like you would do at a restaurant. But be careful",
            "tokens": [
                51568,
                264,
                9265,
                437,
                733,
                295,
                16393,
                321,
                528,
                11,
                445,
                411,
                291,
                576,
                360,
                412,
                257,
                6383,
                13,
                583,
                312,
                5026,
                51844
            ],
            "temperature": 0,
            "avg_logprob": -0.041883938,
            "compression_ratio": 1.79927,
            "no_speech_prob": 9.692435e-13
        },
        {
            "id": 14,
            "seek": 8334,
            "start": 83.34,
            "end": 87.04,
            "text": " because this way you'll never know what's inside the special sauce.",
            "tokens": [
                50365,
                570,
                341,
                636,
                291,
                603,
                1128,
                458,
                437,
                311,
                1854,
                264,
                2121,
                4880,
                13,
                50550
            ],
            "temperature": 0,
            "avg_logprob": -0.17659806,
            "compression_ratio": 1.6412214,
            "no_speech_prob": 7.147991e-13
        },
        {
            "id": 15,
            "seek": 8334,
            "start": 87.26,
            "end": 88.88,
            "text": " We added a secret ingredient.",
            "tokens": [
                50561,
                492,
                3869,
                257,
                4054,
                14751,
                13,
                50642
            ],
            "temperature": 0,
            "avg_logprob": -0.17659806,
            "compression_ratio": 1.6412214,
            "no_speech_prob": 7.147991e-13
        },
        {
            "id": 16,
            "seek": 8334,
            "start": 91.82,
            "end": 92.68,
            "text": " It's semen.",
            "tokens": [
                50789,
                467,
                311,
                369,
                2558,
                13,
                50832
            ],
            "temperature": 0,
            "avg_logprob": -0.17659806,
            "compression_ratio": 1.6412214,
            "no_speech_prob": 7.147991e-13
        },
        {
            "id": 17,
            "seek": 8334,
            "start": 93.66,
            "end": 98.44,
            "text": " Now, alternatively, if you want a little more control over how the sausage is made,",
            "tokens": [
                50881,
                823,
                11,
                8535,
                356,
                11,
                498,
                291,
                528,
                257,
                707,
                544,
                1969,
                670,
                577,
                264,
                20526,
                307,
                1027,
                11,
                51120
            ],
            "temperature": 0,
            "avg_logprob": -0.17659806,
            "compression_ratio": 1.6412214,
            "no_speech_prob": 7.147991e-13
        },
        {
            "id": 18,
            "seek": 8334,
            "start": 98.62,
            "end": 100.26,
            "text": " you can go with the builder pattern.",
            "tokens": [
                51129,
                291,
                393,
                352,
                365,
                264,
                27377,
                5102,
                13,
                51211
            ],
            "temperature": 0,
            "avg_logprob": -0.17659806,
            "compression_ratio": 1.6412214,
            "no_speech_prob": 7.147991e-13
        },
        {
            "id": 19,
            "seek": 8334,
            "start": 100.62,
            "end": 103.14,
            "text": " The idea is that if we want to make a burger,",
            "tokens": [
                51229,
                440,
                1558,
                307,
                300,
                498,
                321,
                528,
                281,
                652,
                257,
                16393,
                11,
                51355
            ],
            "temperature": 0,
            "avg_logprob": -0.17659806,
            "compression_ratio": 1.6412214,
            "no_speech_prob": 7.147991e-13
        },
        {
            "id": 20,
            "seek": 8334,
            "start": 103.28,
            "end": 106.62,
            "text": " we don't immediately have to pass in all the parameters.",
            "tokens": [
                51362,
                321,
                500,
                380,
                4258,
                362,
                281,
                1320,
                294,
                439,
                264,
                9834,
                13,
                51529
            ],
            "temperature": 0,
            "avg_logprob": -0.17659806,
            "compression_ratio": 1.6412214,
            "no_speech_prob": 7.147991e-13
        },
        {
            "id": 21,
            "seek": 8334,
            "start": 106.82,
            "end": 109.18,
            "text": " We can use a burger builder instead.",
            "tokens": [
                51539,
                492,
                393,
                764,
                257,
                16393,
                27377,
                2602,
                13,
                51657
            ],
            "temperature": 0,
            "avg_logprob": -0.17659806,
            "compression_ratio": 1.6412214,
            "no_speech_prob": 7.147991e-13
        },
        {
            "id": 22,
            "seek": 8334,
            "start": 109.64,
            "end": 112.98,
            "text": " We'll have an individual method for adding each ingredient,",
            "tokens": [
                51680,
                492,
                603,
                362,
                364,
                2609,
                3170,
                337,
                5127,
                1184,
                14751,
                11,
                51847
            ],
            "temperature": 0,
            "avg_logprob": -0.17659806,
            "compression_ratio": 1.6412214,
            "no_speech_prob": 7.147991e-13
        },
        {
            "id": 23,
            "seek": 11298,
            "start": 112.98,
            "end": 118.28,
            "text": " whether it's a bun, patty, or cheese, each one will return a reference to the builder.",
            "tokens": [
                50365,
                1968,
                309,
                311,
                257,
                6702,
                11,
                1947,
                874,
                11,
                420,
                5399,
                11,
                1184,
                472,
                486,
                2736,
                257,
                6408,
                281,
                264,
                27377,
                13,
                50630
            ],
            "temperature": 0,
            "avg_logprob": -0.109073184,
            "compression_ratio": 2.05,
            "no_speech_prob": 9.214823e-13
        },
        {
            "id": 24,
            "seek": 11298,
            "start": 118.64,
            "end": 122.98,
            "text": " And finally, we'll have a build method, which will return the final product.",
            "tokens": [
                50648,
                400,
                2721,
                11,
                321,
                603,
                362,
                257,
                1322,
                3170,
                11,
                597,
                486,
                2736,
                264,
                2572,
                1674,
                13,
                50865
            ],
            "temperature": 0,
            "avg_logprob": -0.109073184,
            "compression_ratio": 2.05,
            "no_speech_prob": 9.214823e-13
        },
        {
            "id": 25,
            "seek": 11298,
            "start": 123.3,
            "end": 127.72,
            "text": " Then we can instantiate a burger builder, add the buns that we want,",
            "tokens": [
                50881,
                1396,
                321,
                393,
                9836,
                13024,
                257,
                16393,
                27377,
                11,
                909,
                264,
                33452,
                300,
                321,
                528,
                11,
                51102
            ],
            "temperature": 0,
            "avg_logprob": -0.109073184,
            "compression_ratio": 2.05,
            "no_speech_prob": 9.214823e-13
        },
        {
            "id": 26,
            "seek": 11298,
            "start": 127.86,
            "end": 130.62,
            "text": " the patty that we want, and the cheese that we want.",
            "tokens": [
                51109,
                264,
                1947,
                874,
                300,
                321,
                528,
                11,
                293,
                264,
                5399,
                300,
                321,
                528,
                13,
                51247
            ],
            "temperature": 0,
            "avg_logprob": -0.109073184,
            "compression_ratio": 2.05,
            "no_speech_prob": 9.214823e-13
        },
        {
            "id": 27,
            "seek": 11298,
            "start": 130.74,
            "end": 133.2,
            "text": " And we can chain these methods because remember,",
            "tokens": [
                51253,
                400,
                321,
                393,
                5021,
                613,
                7150,
                570,
                1604,
                11,
                51376
            ],
            "temperature": 0,
            "avg_logprob": -0.109073184,
            "compression_ratio": 2.05,
            "no_speech_prob": 9.214823e-13
        },
        {
            "id": 28,
            "seek": 11298,
            "start": 133.36,
            "end": 136.26,
            "text": " each one will return a reference to the builder.",
            "tokens": [
                51384,
                1184,
                472,
                486,
                2736,
                257,
                6408,
                281,
                264,
                27377,
                13,
                51529
            ],
            "temperature": 0,
            "avg_logprob": -0.109073184,
            "compression_ratio": 2.05,
            "no_speech_prob": 9.214823e-13
        },
        {
            "id": 29,
            "seek": 11298,
            "start": 136.62,
            "end": 140.8,
            "text": " Finally, we can build it and we have the exact burger that we want.",
            "tokens": [
                51547,
                6288,
                11,
                321,
                393,
                1322,
                309,
                293,
                321,
                362,
                264,
                1900,
                16393,
                300,
                321,
                528,
                13,
                51756
            ],
            "temperature": 0,
            "avg_logprob": -0.109073184,
            "compression_ratio": 2.05,
            "no_speech_prob": 9.214823e-13
        },
        {
            "id": 30,
            "seek": 141,
            "start": 140.8,
            "end": 153.95525,
            "text": " I used this pattern a lot at Google with protocol buffers Next we have the singleton pattern And I not talking about my dating life A singleton is just a class that can only have a single instance of it",
            "tokens": [
                50365,
                286,
                600,
                1143,
                341,
                5102,
                257,
                688,
                412,
                3329,
                365,
                10336,
                9204,
                433,
                13,
                50553,
                50553,
                3087,
                11,
                321,
                362,
                264,
                1522,
                14806,
                5102,
                13,
                50669,
                50669,
                478,
                406,
                50655,
                50655,
                1417,
                466,
                452,
                10689,
                993,
                13,
                316,
                1522,
                14806,
                307,
                445,
                257,
                1508,
                300,
                393,
                787,
                362,
                257,
                2167,
                5197,
                295,
                309,
                50976
            ],
            "temperature": 0,
            "avg_logprob": -0.05415139,
            "compression_ratio": 1.6678445,
            "no_speech_prob": 5.8574424e-13
        },
        {
            "id": 31,
            "seek": 141,
            "start": 153.95525,
            "end": 159.69525,
            "text": " that's instantiated. It has many use cases, for example, maintaining a single copy of our",
            "tokens": [
                50976,
                300,
                311,
                9836,
                72,
                770,
                13,
                467,
                575,
                867,
                764,
                3331,
                11,
                337,
                1365,
                11,
                14916,
                257,
                2167,
                5055,
                295,
                527,
                51263
            ],
            "temperature": 0,
            "avg_logprob": -0.05415139,
            "compression_ratio": 1.6678445,
            "no_speech_prob": 5.8574424e-13
        },
        {
            "id": 32,
            "seek": 141,
            "start": 159.69525,
            "end": 165.69525,
            "text": " application state. We would start by having a static instance variable. Let's say in our app,",
            "tokens": [
                51263,
                3861,
                1785,
                13,
                492,
                576,
                722,
                538,
                1419,
                257,
                13437,
                5197,
                7006,
                13,
                961,
                311,
                584,
                294,
                527,
                724,
                11,
                51563
            ],
            "temperature": 0,
            "avg_logprob": -0.05415139,
            "compression_ratio": 1.6678445,
            "no_speech_prob": 5.8574424e-13
        },
        {
            "id": 33,
            "seek": 141,
            "start": 165.77524,
            "end": 171.49524,
            "text": " we want to know if a user is logged in or not. But we won't use the constructor to actually",
            "tokens": [
                51567,
                321,
                528,
                281,
                458,
                498,
                257,
                4195,
                307,
                27231,
                294,
                420,
                406,
                13,
                583,
                321,
                1582,
                380,
                764,
                264,
                47479,
                281,
                767,
                51853
            ],
            "temperature": 0,
            "avg_logprob": -0.05415139,
            "compression_ratio": 1.6678445,
            "no_speech_prob": 5.8574424e-13
        },
        {
            "id": 34,
            "seek": 3117,
            "start": 171.49524,
            "end": 178.13525,
            "text": " instantiate the application state. We'll use a static method called getAppState, which will first",
            "tokens": [
                50365,
                9836,
                13024,
                264,
                3861,
                1785,
                13,
                492,
                603,
                764,
                257,
                13437,
                3170,
                1219,
                483,
                9132,
                4520,
                473,
                11,
                597,
                486,
                700,
                50697
            ],
            "temperature": 0,
            "avg_logprob": -0.06316503,
            "compression_ratio": 1.7727273,
            "no_speech_prob": 1.027993e-12
        },
        {
            "id": 35,
            "seek": 3117,
            "start": 178.13525,
            "end": 184.09525,
            "text": " check if there's already an existing instance of our application state. If not, we'll instantiate",
            "tokens": [
                50697,
                1520,
                498,
                456,
                311,
                1217,
                364,
                6741,
                5197,
                295,
                527,
                3861,
                1785,
                13,
                759,
                406,
                11,
                321,
                603,
                9836,
                13024,
                50995
            ],
            "temperature": 0,
            "avg_logprob": -0.06316503,
            "compression_ratio": 1.7727273,
            "no_speech_prob": 1.027993e-12
        },
        {
            "id": 36,
            "seek": 3117,
            "start": 184.09525,
            "end": 189.43524,
            "text": " one. If there already is, though, we'll just return the existing instance. We'll never create",
            "tokens": [
                50995,
                472,
                13,
                759,
                456,
                1217,
                307,
                11,
                1673,
                11,
                321,
                603,
                445,
                2736,
                264,
                6741,
                5197,
                13,
                492,
                603,
                1128,
                1884,
                51262
            ],
            "temperature": 0,
            "avg_logprob": -0.06316503,
            "compression_ratio": 1.7727273,
            "no_speech_prob": 1.027993e-12
        },
        {
            "id": 37,
            "seek": 3117,
            "start": 189.43524,
            "end": 195.61525,
            "text": " more than one. So now if we get our app state for the first time, the logged in value will initially",
            "tokens": [
                51262,
                544,
                813,
                472,
                13,
                407,
                586,
                498,
                321,
                483,
                527,
                724,
                1785,
                337,
                264,
                700,
                565,
                11,
                264,
                27231,
                294,
                2158,
                486,
                9105,
                51571
            ],
            "temperature": 0,
            "avg_logprob": -0.06316503,
            "compression_ratio": 1.7727273,
            "no_speech_prob": 1.027993e-12
        },
        {
            "id": 38,
            "seek": 5529,
            "start": 195.61525,
            "end": 201.27524,
            "text": " be false. But if we get the app state again, this will actually still be the first instance.",
            "tokens": [
                50365,
                312,
                7908,
                13,
                583,
                498,
                321,
                483,
                264,
                724,
                1785,
                797,
                11,
                341,
                486,
                767,
                920,
                312,
                264,
                700,
                5197,
                13,
                50648
            ],
            "temperature": 0,
            "avg_logprob": -0.0731721,
            "compression_ratio": 1.7169118,
            "no_speech_prob": 6.458315e-13
        },
        {
            "id": 39,
            "seek": 5529,
            "start": 201.51524,
            "end": 207.15524,
            "text": " So if we modify the first instance and then print the logged in value for both of them,",
            "tokens": [
                50660,
                407,
                498,
                321,
                16927,
                264,
                700,
                5197,
                293,
                550,
                4482,
                264,
                27231,
                294,
                2158,
                337,
                1293,
                295,
                552,
                11,
                50942
            ],
            "temperature": 0,
            "avg_logprob": -0.0731721,
            "compression_ratio": 1.7169118,
            "no_speech_prob": 6.458315e-13
        },
        {
            "id": 40,
            "seek": 5529,
            "start": 207.35526,
            "end": 213.23524,
            "text": " they will both now be true. This pattern can be useful so that multiple components in your app",
            "tokens": [
                50952,
                436,
                486,
                1293,
                586,
                312,
                2074,
                13,
                639,
                5102,
                393,
                312,
                4420,
                370,
                300,
                3866,
                6677,
                294,
                428,
                724,
                51246
            ],
            "temperature": 0,
            "avg_logprob": -0.0731721,
            "compression_ratio": 1.7169118,
            "no_speech_prob": 6.458315e-13
        },
        {
            "id": 41,
            "seek": 5529,
            "start": 213.23524,
            "end": 219.85526,
            "text": " will have a shared source of truth. But how can all the components listen for updates in real time?",
            "tokens": [
                51246,
                486,
                362,
                257,
                5507,
                4009,
                295,
                3494,
                13,
                583,
                577,
                393,
                439,
                264,
                6677,
                2140,
                337,
                9205,
                294,
                957,
                565,
                30,
                51577
            ],
            "temperature": 0,
            "avg_logprob": -0.0731721,
            "compression_ratio": 1.7169118,
            "no_speech_prob": 6.458315e-13
        },
        {
            "id": 42,
            "seek": 5529,
            "start": 219.85526,
            "end": 225.25525,
            "text": " Well, that's where the observer comes in, our first behavioral pattern. I prefer to call it",
            "tokens": [
                51577,
                1042,
                11,
                300,
                311,
                689,
                264,
                27878,
                1487,
                294,
                11,
                527,
                700,
                19124,
                5102,
                13,
                286,
                4382,
                281,
                818,
                309,
                51847
            ],
            "temperature": 0,
            "avg_logprob": -0.0731721,
            "compression_ratio": 1.7169118,
            "no_speech_prob": 6.458315e-13
        },
        {
            "id": 43,
            "seek": 8493,
            "start": 225.25525,
            "end": 231.37524,
            "text": " the PubSub pattern, it's widely used beyond just object-oriented programming, including in",
            "tokens": [
                50365,
                264,
                21808,
                39582,
                5102,
                11,
                309,
                311,
                13371,
                1143,
                4399,
                445,
                2657,
                12,
                27414,
                9410,
                11,
                3009,
                294,
                50671
            ],
            "temperature": 0,
            "avg_logprob": -0.059078213,
            "compression_ratio": 1.4879032,
            "no_speech_prob": 5.5673917e-13
        },
        {
            "id": 44,
            "seek": 8493,
            "start": 231.37524,
            "end": 238.01524,
            "text": " distributed systems. Let's take YouTube, for example. Every time I upload a video, all of my",
            "tokens": [
                50671,
                12631,
                3652,
                13,
                961,
                311,
                747,
                3088,
                11,
                337,
                1365,
                13,
                2048,
                565,
                286,
                6580,
                257,
                960,
                11,
                439,
                295,
                452,
                51003
            ],
            "temperature": 0,
            "avg_logprob": -0.059078213,
            "compression_ratio": 1.4879032,
            "no_speech_prob": 5.5673917e-13
        },
        {
            "id": 45,
            "seek": 8493,
            "start": 238.01524,
            "end": 243.99524,
            "text": " subscribers get a notification, including you, because you're subscribed, right? But in this",
            "tokens": [
                51003,
                11092,
                483,
                257,
                11554,
                11,
                3009,
                291,
                11,
                570,
                291,
                434,
                16665,
                11,
                558,
                30,
                583,
                294,
                341,
                51302
            ],
            "temperature": 0,
            "avg_logprob": -0.059078213,
            "compression_ratio": 1.4879032,
            "no_speech_prob": 5.5673917e-13
        },
        {
            "id": 46,
            "seek": 8493,
            "start": 243.99524,
            "end": 250.99524,
            "text": " case, the YouTube channel is the subject, aka publisher, which will be the source of events,",
            "tokens": [
                51302,
                1389,
                11,
                264,
                3088,
                2269,
                307,
                264,
                3983,
                11,
                28042,
                25088,
                11,
                597,
                486,
                312,
                264,
                4009,
                295,
                3931,
                11,
                51652
            ],
            "temperature": 0,
            "avg_logprob": -0.059078213,
            "compression_ratio": 1.4879032,
            "no_speech_prob": 5.5673917e-13
        },
        {
            "id": 47,
            "seek": 11067,
            "start": 250.99524,
            "end": 257.81525,
            "text": " such as a new video being uploaded. We might want multiple observers, aka subscribers,",
            "tokens": [
                50365,
                1270,
                382,
                257,
                777,
                960,
                885,
                17135,
                13,
                492,
                1062,
                528,
                3866,
                48090,
                11,
                28042,
                11092,
                11,
                50706
            ],
            "temperature": 0,
            "avg_logprob": -0.0674778,
            "compression_ratio": 1.7342342,
            "no_speech_prob": 7.2898534e-13
        },
        {
            "id": 48,
            "seek": 11067,
            "start": 258.05524,
            "end": 264.25525,
            "text": " to all be notified when these events happen in real time. One way to implement this pattern is",
            "tokens": [
                50718,
                281,
                439,
                312,
                18013,
                562,
                613,
                3931,
                1051,
                294,
                957,
                565,
                13,
                1485,
                636,
                281,
                4445,
                341,
                5102,
                307,
                51028
            ],
            "temperature": 0,
            "avg_logprob": -0.0674778,
            "compression_ratio": 1.7342342,
            "no_speech_prob": 7.2898534e-13
        },
        {
            "id": 49,
            "seek": 11067,
            "start": 264.25525,
            "end": 271.19525,
            "text": " to have a YouTube channel class which maintains a list of its subscribers. When a new user subscribes,",
            "tokens": [
                51028,
                281,
                362,
                257,
                3088,
                2269,
                1508,
                597,
                33385,
                257,
                1329,
                295,
                1080,
                11092,
                13,
                1133,
                257,
                777,
                4195,
                2325,
                6446,
                11,
                51375
            ],
            "temperature": 0,
            "avg_logprob": -0.0674778,
            "compression_ratio": 1.7342342,
            "no_speech_prob": 7.2898534e-13
        },
        {
            "id": 50,
            "seek": 11067,
            "start": 271.29523,
            "end": 277.73523,
            "text": " we add them to the list of subscribers. When an event occurs, we go through that list of subscribers",
            "tokens": [
                51380,
                321,
                909,
                552,
                281,
                264,
                1329,
                295,
                11092,
                13,
                1133,
                364,
                2280,
                11843,
                11,
                321,
                352,
                807,
                300,
                1329,
                295,
                11092,
                51702
            ],
            "temperature": 0,
            "avg_logprob": -0.0674778,
            "compression_ratio": 1.7342342,
            "no_speech_prob": 7.2898534e-13
        },
        {
            "id": 51,
            "seek": 13741,
            "start": 277.73523,
            "end": 281.89526,
            "text": " and send the event data to each of them with a notification.",
            "tokens": [
                50365,
                293,
                2845,
                264,
                2280,
                1412,
                281,
                1184,
                295,
                552,
                365,
                257,
                11554,
                13,
                50573
            ],
            "temperature": 0,
            "avg_logprob": -0.17763394,
            "compression_ratio": 1.6588784,
            "no_speech_prob": 4.743644e-13
        },
        {
            "id": 52,
            "seek": 13741,
            "start": 281.89526,
            "end": 284.99524,
            "text": " But we also have to define the subscriber interface,",
            "tokens": [
                50573,
                583,
                321,
                611,
                362,
                281,
                6964,
                264,
                26122,
                9226,
                11,
                50728
            ],
            "temperature": 0,
            "avg_logprob": -0.17763394,
            "compression_ratio": 1.6588784,
            "no_speech_prob": 4.743644e-13
        },
        {
            "id": 53,
            "seek": 288,
            "start": 284.99524,
            "end": 302.93048,
            "text": " which you can do with an abstract class or an interface Different subscribers might implement this interface differently but for a YouTube user let say that we just want to print the notification that was received So then we can create a YouTube channel add a few subscribers and we only have to call",
            "tokens": [
                50728,
                597,
                291,
                393,
                360,
                365,
                364,
                12649,
                1508,
                420,
                364,
                9226,
                13,
                50910,
                50910,
                20825,
                11092,
                1062,
                4445,
                50997,
                50997,
                341,
                9226,
                7614,
                11,
                457,
                337,
                257,
                3088,
                4195,
                11,
                51140,
                51140,
                718,
                311,
                584,
                300,
                321,
                445,
                528,
                281,
                4482,
                264,
                11554,
                300,
                390,
                4613,
                13,
                50794,
                50807,
                407,
                550,
                321,
                393,
                1884,
                257,
                3088,
                2269,
                11,
                909,
                257,
                1326,
                11092,
                11,
                293,
                321,
                787,
                362,
                281,
                818,
                51088
            ],
            "temperature": 0,
            "avg_logprob": -0.10112225,
            "compression_ratio": 1.7913043,
            "no_speech_prob": 8.390283e-13
        },
        {
            "id": 54,
            "seek": 288,
            "start": 302.93048,
            "end": 307.21048,
            "text": " notify once and all of the subscribers will receive the notification.",
            "tokens": [
                51088,
                36560,
                1564,
                293,
                439,
                295,
                264,
                11092,
                486,
                4774,
                264,
                11554,
                13,
                51302
            ],
            "temperature": 0,
            "avg_logprob": -0.10112225,
            "compression_ratio": 1.7913043,
            "no_speech_prob": 8.390283e-13
        },
        {
            "id": 55,
            "seek": 288,
            "start": 307.77048,
            "end": 313.27048,
            "text": " This is also extensible enough that a subscriber could be subscribed to multiple channels.",
            "tokens": [
                51330,
                639,
                307,
                611,
                1279,
                30633,
                1547,
                300,
                257,
                26122,
                727,
                312,
                16665,
                281,
                3866,
                9235,
                13,
                51605
            ],
            "temperature": 0,
            "avg_logprob": -0.10112225,
            "compression_ratio": 1.7913043,
            "no_speech_prob": 8.390283e-13
        },
        {
            "id": 56,
            "seek": 2768,
            "start": 313.27048,
            "end": 319.3905,
            "text": " An iterator is a pretty simple pattern that defines how the values in an object can be",
            "tokens": [
                50365,
                1107,
                17138,
                1639,
                307,
                257,
                1238,
                2199,
                5102,
                300,
                23122,
                577,
                264,
                4190,
                294,
                364,
                2657,
                393,
                312,
                50671
            ],
            "temperature": 0,
            "avg_logprob": -0.108449556,
            "compression_ratio": 1.6008772,
            "no_speech_prob": 6.9557934e-13
        },
        {
            "id": 57,
            "seek": 2768,
            "start": 319.3905,
            "end": 320.37048,
            "text": " iterated through.",
            "tokens": [
                50671,
                17138,
                770,
                807,
                13,
                50720
            ],
            "temperature": 0,
            "avg_logprob": -0.108449556,
            "compression_ratio": 1.6008772,
            "no_speech_prob": 6.9557934e-13
        },
        {
            "id": 58,
            "seek": 2768,
            "start": 320.71048,
            "end": 326.8505,
            "text": " In Python, just defining an array and then iterating through it with the in keyword uses",
            "tokens": [
                50737,
                682,
                15329,
                11,
                445,
                17827,
                364,
                10225,
                293,
                550,
                17138,
                990,
                807,
                309,
                365,
                264,
                294,
                20428,
                4960,
                51044
            ],
            "temperature": 0,
            "avg_logprob": -0.108449556,
            "compression_ratio": 1.6008772,
            "no_speech_prob": 6.9557934e-13
        },
        {
            "id": 59,
            "seek": 2768,
            "start": 326.8505,
            "end": 329.09048,
            "text": " the built-in list iterator.",
            "tokens": [
                51044,
                264,
                3094,
                12,
                259,
                1329,
                17138,
                1639,
                13,
                51156
            ],
            "temperature": 0,
            "avg_logprob": -0.108449556,
            "compression_ratio": 1.6008772,
            "no_speech_prob": 6.9557934e-13
        },
        {
            "id": 60,
            "seek": 2768,
            "start": 329.4105,
            "end": 332.11047,
            "text": " This way, we don't even have to index the array.",
            "tokens": [
                51172,
                639,
                636,
                11,
                321,
                500,
                380,
                754,
                362,
                281,
                8186,
                264,
                10225,
                13,
                51307
            ],
            "temperature": 0,
            "avg_logprob": -0.108449556,
            "compression_ratio": 1.6008772,
            "no_speech_prob": 6.9557934e-13
        },
        {
            "id": 61,
            "seek": 2768,
            "start": 332.3905,
            "end": 337.65048,
            "text": " Now, for more complex objects like binary search trees or linked lists, we can define",
            "tokens": [
                51321,
                823,
                11,
                337,
                544,
                3997,
                6565,
                411,
                17434,
                3164,
                5852,
                420,
                9408,
                14511,
                11,
                321,
                393,
                6964,
                51584
            ],
            "temperature": 0,
            "avg_logprob": -0.108449556,
            "compression_ratio": 1.6008772,
            "no_speech_prob": 6.9557934e-13
        },
        {
            "id": 62,
            "seek": 2768,
            "start": 337.65048,
            "end": 338.2505,
            "text": " our own.",
            "tokens": [
                51584,
                527,
                1065,
                13,
                51614
            ],
            "temperature": 0,
            "avg_logprob": -0.108449556,
            "compression_ratio": 1.6008772,
            "no_speech_prob": 6.9557934e-13
        },
        {
            "id": 63,
            "seek": 5266,
            "start": 338.2505,
            "end": 344.0105,
            "text": " We can take a list node which just has a value and a next pointer, and then a linked list which",
            "tokens": [
                50365,
                492,
                393,
                747,
                257,
                1329,
                9984,
                597,
                445,
                575,
                257,
                2158,
                293,
                257,
                958,
                23918,
                11,
                293,
                550,
                257,
                9408,
                1329,
                597,
                50653
            ],
            "temperature": 0,
            "avg_logprob": -0.064379886,
            "compression_ratio": 2.1351352,
            "no_speech_prob": 8.0376325e-13
        },
        {
            "id": 64,
            "seek": 5266,
            "start": 344.0105,
            "end": 350.49048,
            "text": " has a head pointer and a current pointer. We can first define the iterator with the iter function,",
            "tokens": [
                50653,
                575,
                257,
                1378,
                23918,
                293,
                257,
                2190,
                23918,
                13,
                492,
                393,
                700,
                6964,
                264,
                17138,
                1639,
                365,
                264,
                17138,
                2445,
                11,
                50977
            ],
            "temperature": 0,
            "avg_logprob": -0.064379886,
            "compression_ratio": 2.1351352,
            "no_speech_prob": 8.0376325e-13
        },
        {
            "id": 65,
            "seek": 5266,
            "start": 350.49048,
            "end": 355.21048,
            "text": " which will just set the current pointer to the head and then return a reference to the linked",
            "tokens": [
                50977,
                597,
                486,
                445,
                992,
                264,
                2190,
                23918,
                281,
                264,
                1378,
                293,
                550,
                2736,
                257,
                6408,
                281,
                264,
                9408,
                51213
            ],
            "temperature": 0,
            "avg_logprob": -0.064379886,
            "compression_ratio": 2.1351352,
            "no_speech_prob": 8.0376325e-13
        },
        {
            "id": 66,
            "seek": 5266,
            "start": 355.21048,
            "end": 361.37048,
            "text": " list. To get the next value in the sequence, we define the next function. If our current pointer",
            "tokens": [
                51213,
                1329,
                13,
                1407,
                483,
                264,
                958,
                2158,
                294,
                264,
                8310,
                11,
                321,
                6964,
                264,
                958,
                2445,
                13,
                759,
                527,
                2190,
                23918,
                51521
            ],
            "temperature": 0,
            "avg_logprob": -0.064379886,
            "compression_ratio": 2.1351352,
            "no_speech_prob": 8.0376325e-13
        },
        {
            "id": 67,
            "seek": 5266,
            "start": 361.37048,
            "end": 367.21048,
            "text": " is non-null, we can get the value and then return it and also shift the current pointer.",
            "tokens": [
                51521,
                307,
                2107,
                12,
                77,
                858,
                11,
                321,
                393,
                483,
                264,
                2158,
                293,
                550,
                2736,
                309,
                293,
                611,
                5513,
                264,
                2190,
                23918,
                13,
                51813
            ],
            "temperature": 0,
            "avg_logprob": -0.064379886,
            "compression_ratio": 2.1351352,
            "no_speech_prob": 8.0376325e-13
        },
        {
            "id": 68,
            "seek": 8162,
            "start": 367.21048,
            "end": 372.6905,
            "text": " But if we reach the end of the linked list, we can send a signal that we're going to stop iterating.",
            "tokens": [
                50365,
                583,
                498,
                321,
                2524,
                264,
                917,
                295,
                264,
                9408,
                1329,
                11,
                321,
                393,
                2845,
                257,
                6358,
                300,
                321,
                434,
                516,
                281,
                1590,
                17138,
                990,
                13,
                50639
            ],
            "temperature": 0,
            "avg_logprob": -0.120385416,
            "compression_ratio": 1.664,
            "no_speech_prob": 1.1289165e-12
        },
        {
            "id": 69,
            "seek": 8162,
            "start": 372.93048,
            "end": 378.17047,
            "text": " To test it out, we can just initialize the linked list and iterate through it with the in keyword.",
            "tokens": [
                50651,
                1407,
                1500,
                309,
                484,
                11,
                321,
                393,
                445,
                5883,
                1125,
                264,
                9408,
                1329,
                293,
                44497,
                807,
                309,
                365,
                264,
                294,
                20428,
                13,
                50913
            ],
            "temperature": 0,
            "avg_logprob": -0.120385416,
            "compression_ratio": 1.664,
            "no_speech_prob": 1.1289165e-12
        },
        {
            "id": 70,
            "seek": 8162,
            "start": 378.5305,
            "end": 383.5705,
            "text": " This is a much more simple interface than having to actually update pointers ourselves.",
            "tokens": [
                50931,
                639,
                307,
                257,
                709,
                544,
                2199,
                9226,
                813,
                1419,
                281,
                767,
                5623,
                44548,
                4175,
                13,
                51183
            ],
            "temperature": 0,
            "avg_logprob": -0.120385416,
            "compression_ratio": 1.664,
            "no_speech_prob": 1.1289165e-12
        },
        {
            "id": 71,
            "seek": 8162,
            "start": 383.9505,
            "end": 389.4705,
            "text": " Now, if you want to modify or extend the behavior of a class without directly changing it,",
            "tokens": [
                51202,
                823,
                11,
                498,
                291,
                528,
                281,
                16927,
                420,
                10101,
                264,
                5223,
                295,
                257,
                1508,
                1553,
                3838,
                4473,
                309,
                11,
                51478
            ],
            "temperature": 0,
            "avg_logprob": -0.120385416,
            "compression_ratio": 1.664,
            "no_speech_prob": 1.1289165e-12
        },
        {
            "id": 72,
            "seek": 8162,
            "start": 389.59048,
            "end": 391.67047,
            "text": " you can go with the strategy pattern.",
            "tokens": [
                51484,
                291,
                393,
                352,
                365,
                264,
                5206,
                5102,
                13,
                51588
            ],
            "temperature": 0,
            "avg_logprob": -0.120385416,
            "compression_ratio": 1.664,
            "no_speech_prob": 1.1289165e-12
        },
        {
            "id": 73,
            "seek": 10608,
            "start": 391.67047,
            "end": 398.2505,
            "text": " For example, we can filter an array by removing positive values, or we could filter it by removing",
            "tokens": [
                50365,
                1171,
                1365,
                11,
                321,
                393,
                6608,
                364,
                10225,
                538,
                12720,
                3353,
                4190,
                11,
                420,
                321,
                727,
                6608,
                309,
                538,
                12720,
                50694
            ],
            "temperature": 0,
            "avg_logprob": -0.08792731,
            "compression_ratio": 1.7380953,
            "no_speech_prob": 5.373758e-13
        },
        {
            "id": 74,
            "seek": 10608,
            "start": 398.2505,
            "end": 404.1905,
            "text": " all odd values. These are two strategies, but maybe in the future we want to add more.",
            "tokens": [
                50694,
                439,
                7401,
                4190,
                13,
                1981,
                366,
                732,
                9029,
                11,
                457,
                1310,
                294,
                264,
                2027,
                321,
                528,
                281,
                909,
                544,
                13,
                50991
            ],
            "temperature": 0,
            "avg_logprob": -0.08792731,
            "compression_ratio": 1.7380953,
            "no_speech_prob": 5.373758e-13
        },
        {
            "id": 75,
            "seek": 10608,
            "start": 404.4505,
            "end": 410.6305,
            "text": " And we want to follow the open-closed principle. Well, we can define a filter strategy,",
            "tokens": [
                51004,
                400,
                321,
                528,
                281,
                1524,
                264,
                1269,
                12,
                3474,
                1744,
                8665,
                13,
                1042,
                11,
                321,
                393,
                6964,
                257,
                6608,
                5206,
                11,
                51313
            ],
            "temperature": 0,
            "avg_logprob": -0.08792731,
            "compression_ratio": 1.7380953,
            "no_speech_prob": 5.373758e-13
        },
        {
            "id": 76,
            "seek": 10608,
            "start": 411.05048,
            "end": 416.7905,
            "text": " create an implementation which will remove all negative values, and an implementation which",
            "tokens": [
                51334,
                1884,
                364,
                11420,
                597,
                486,
                4159,
                439,
                3671,
                4190,
                11,
                293,
                364,
                11420,
                597,
                51621
            ],
            "temperature": 0,
            "avg_logprob": -0.08792731,
            "compression_ratio": 1.7380953,
            "no_speech_prob": 5.373758e-13
        },
        {
            "id": 77,
            "seek": 13120,
            "start": 416.7905,
            "end": 419.23047,
            "text": " which will remove all odd values.",
            "tokens": [
                50365,
                597,
                486,
                4159,
                439,
                7401,
                4190,
                13,
                50487
            ],
            "temperature": 0,
            "avg_logprob": -0.119447775,
            "compression_ratio": 1.6680851,
            "no_speech_prob": 6.2840727e-13
        },
        {
            "id": 78,
            "seek": 13120,
            "start": 419.23047,
            "end": 421.0105,
            "text": " And then at runtime,",
            "tokens": [
                50487,
                400,
                550,
                412,
                34474,
                11,
                50576
            ],
            "temperature": 0,
            "avg_logprob": -0.119447775,
            "compression_ratio": 1.6680851,
            "no_speech_prob": 6.2840727e-13
        },
        {
            "id": 79,
            "seek": 13120,
            "start": 421.0105,
            "end": 425.15048,
            "text": " we can pass this strategy into our values object.",
            "tokens": [
                50576,
                321,
                393,
                1320,
                341,
                5206,
                666,
                527,
                4190,
                2657,
                13,
                50783
            ],
            "temperature": 0,
            "avg_logprob": -0.119447775,
            "compression_ratio": 1.6680851,
            "no_speech_prob": 6.2840727e-13
        },
        {
            "id": 80,
            "seek": 13120,
            "start": 425.15048,
            "end": 426.37048,
            "text": " And to test it out,",
            "tokens": [
                50783,
                400,
                281,
                1500,
                309,
                484,
                11,
                50844
            ],
            "temperature": 0,
            "avg_logprob": -0.119447775,
            "compression_ratio": 1.6680851,
            "no_speech_prob": 6.2840727e-13
        },
        {
            "id": 81,
            "seek": 13120,
            "start": 426.37048,
            "end": 429.2505,
            "text": " all we have to do is pass in the strategy",
            "tokens": [
                50844,
                439,
                321,
                362,
                281,
                360,
                307,
                1320,
                294,
                264,
                5206,
                50988
            ],
            "temperature": 0,
            "avg_logprob": -0.119447775,
            "compression_ratio": 1.6680851,
            "no_speech_prob": 6.2840727e-13
        },
        {
            "id": 82,
            "seek": 13120,
            "start": 429.2505,
            "end": 433.2505,
            "text": " into our filter method and we'll get our desired result.",
            "tokens": [
                50988,
                666,
                527,
                6608,
                3170,
                293,
                321,
                603,
                483,
                527,
                14721,
                1874,
                13,
                51188
            ],
            "temperature": 0,
            "avg_logprob": -0.119447775,
            "compression_ratio": 1.6680851,
            "no_speech_prob": 6.2840727e-13
        },
        {
            "id": 83,
            "seek": 435,
            "start": 433.2505,
            "end": 449.86575,
            "text": " This way we can add additional strategies without modifying our values class Next we have the adapter our first structural pattern It analogous to the real world where we have a screw that too small to fit into a hole",
            "tokens": [
                51188,
                639,
                636,
                321,
                393,
                909,
                4497,
                9029,
                51328,
                51328,
                1553,
                42626,
                527,
                4190,
                1508,
                13,
                51479,
                51479,
                3087,
                11,
                321,
                362,
                264,
                22860,
                11,
                527,
                700,
                15067,
                50730,
                50730,
                5102,
                13,
                467,
                311,
                16660,
                563,
                281,
                264,
                957,
                1002,
                689,
                321,
                362,
                257,
                5630,
                300,
                311,
                886,
                1359,
                281,
                3318,
                666,
                257,
                5458,
                13,
                51098
            ],
            "temperature": 0,
            "avg_logprob": -0.085420646,
            "compression_ratio": 1.523316,
            "no_speech_prob": 6.715485e-13
        },
        {
            "id": 84,
            "seek": 435,
            "start": 450.12576,
            "end": 457.50574,
            "text": " So instead, we use an adapter, which makes the screw compatible with the hole. Or maybe an example",
            "tokens": [
                51111,
                407,
                2602,
                11,
                321,
                764,
                364,
                22860,
                11,
                597,
                1669,
                264,
                5630,
                18218,
                365,
                264,
                5458,
                13,
                1610,
                1310,
                364,
                1365,
                51480
            ],
            "temperature": 0,
            "avg_logprob": -0.085420646,
            "compression_ratio": 1.523316,
            "no_speech_prob": 6.715485e-13
        },
        {
            "id": 85,
            "seek": 2665,
            "start": 457.50574,
            "end": 459.10574,
            "text": " that you're more familiar with,",
            "tokens": [
                50365,
                300,
                291,
                434,
                544,
                4963,
                365,
                11,
                50445
            ],
            "temperature": 0,
            "avg_logprob": -0.16177681,
            "compression_ratio": 1.8350515,
            "no_speech_prob": 7.2328287e-13
        },
        {
            "id": 86,
            "seek": 2665,
            "start": 459.18576,
            "end": 462.68576,
            "text": " we have a USB cable and a USB port.",
            "tokens": [
                50449,
                321,
                362,
                257,
                10109,
                8220,
                293,
                257,
                10109,
                2436,
                13,
                50624
            ],
            "temperature": 0,
            "avg_logprob": -0.16177681,
            "compression_ratio": 1.8350515,
            "no_speech_prob": 7.2328287e-13
        },
        {
            "id": 87,
            "seek": 2665,
            "start": 462.84576,
            "end": 465.32574,
            "text": " We can plug in the USB cable,",
            "tokens": [
                50632,
                492,
                393,
                5452,
                294,
                264,
                10109,
                8220,
                11,
                50756
            ],
            "temperature": 0,
            "avg_logprob": -0.16177681,
            "compression_ratio": 1.8350515,
            "no_speech_prob": 7.2328287e-13
        },
        {
            "id": 88,
            "seek": 2665,
            "start": 465.44574,
            "end": 467.82574,
            "text": " which will directly fit into the port.",
            "tokens": [
                50762,
                597,
                486,
                3838,
                3318,
                666,
                264,
                2436,
                13,
                50881
            ],
            "temperature": 0,
            "avg_logprob": -0.16177681,
            "compression_ratio": 1.8350515,
            "no_speech_prob": 7.2328287e-13
        },
        {
            "id": 89,
            "seek": 2665,
            "start": 467.82574,
            "end": 471.40576,
            "text": " But instead, if we have a micro USB cable,",
            "tokens": [
                50881,
                583,
                2602,
                11,
                498,
                321,
                362,
                257,
                4532,
                10109,
                8220,
                11,
                51060
            ],
            "temperature": 0,
            "avg_logprob": -0.16177681,
            "compression_ratio": 1.8350515,
            "no_speech_prob": 7.2328287e-13
        },
        {
            "id": 90,
            "seek": 2665,
            "start": 471.66574,
            "end": 472.92575,
            "text": " it's not compatible.",
            "tokens": [
                51073,
                309,
                311,
                406,
                18218,
                13,
                51136
            ],
            "temperature": 0,
            "avg_logprob": -0.16177681,
            "compression_ratio": 1.8350515,
            "no_speech_prob": 7.2328287e-13
        },
        {
            "id": 91,
            "seek": 2665,
            "start": 473.16574,
            "end": 477.00574,
            "text": " So instead, we need a micro to USB adapter,",
            "tokens": [
                51148,
                407,
                2602,
                11,
                321,
                643,
                257,
                4532,
                281,
                10109,
                22860,
                11,
                51340
            ],
            "temperature": 0,
            "avg_logprob": -0.16177681,
            "compression_ratio": 1.8350515,
            "no_speech_prob": 7.2328287e-13
        },
        {
            "id": 92,
            "seek": 2665,
            "start": 477.42575,
            "end": 480.14575,
            "text": " which extends from the USB class,",
            "tokens": [
                51361,
                597,
                26448,
                490,
                264,
                10109,
                1508,
                11,
                51497
            ],
            "temperature": 0,
            "avg_logprob": -0.16177681,
            "compression_ratio": 1.8350515,
            "no_speech_prob": 7.2328287e-13
        },
        {
            "id": 93,
            "seek": 2665,
            "start": 480.28577,
            "end": 483.92575,
            "text": " but is composed of a micro USB cable,",
            "tokens": [
                51504,
                457,
                307,
                18204,
                295,
                257,
                4532,
                10109,
                8220,
                11,
                51686
            ],
            "temperature": 0,
            "avg_logprob": -0.16177681,
            "compression_ratio": 1.8350515,
            "no_speech_prob": 7.2328287e-13
        },
        {
            "id": 94,
            "seek": 2665,
            "start": 483.92575,
            "end": 486.54575,
            "text": " which will be plugged into the adapter.",
            "tokens": [
                51686,
                597,
                486,
                312,
                25679,
                666,
                264,
                22860,
                13,
                51817
            ],
            "temperature": 0,
            "avg_logprob": -0.16177681,
            "compression_ratio": 1.8350515,
            "no_speech_prob": 7.2328287e-13
        },
        {
            "id": 95,
            "seek": 5569,
            "start": 486.54575,
            "end": 493.22574,
            "text": " We can override the plug USB method from our parent class if needed, but it's not in this case.",
            "tokens": [
                50365,
                492,
                393,
                42321,
                264,
                5452,
                10109,
                3170,
                490,
                527,
                2596,
                1508,
                498,
                2978,
                11,
                457,
                309,
                311,
                406,
                294,
                341,
                1389,
                13,
                50699
            ],
            "temperature": 0,
            "avg_logprob": -0.091932185,
            "compression_ratio": 1.6403508,
            "no_speech_prob": 6.6893496e-13
        },
        {
            "id": 96,
            "seek": 5569,
            "start": 493.46576,
            "end": 499.68576,
            "text": " And then we can plug our micro USB cable into the adapter and then plug it into the port,",
            "tokens": [
                50711,
                400,
                550,
                321,
                393,
                5452,
                527,
                4532,
                10109,
                8220,
                666,
                264,
                22860,
                293,
                550,
                5452,
                309,
                666,
                264,
                2436,
                11,
                51022
            ],
            "temperature": 0,
            "avg_logprob": -0.091932185,
            "compression_ratio": 1.6403508,
            "no_speech_prob": 6.6893496e-13
        },
        {
            "id": 97,
            "seek": 5569,
            "start": 499.88574,
            "end": 507.10574,
            "text": " and it works just like a regular USB cable. And our last pattern is the facade. According to the",
            "tokens": [
                51032,
                293,
                309,
                1985,
                445,
                411,
                257,
                3890,
                10109,
                8220,
                13,
                400,
                527,
                1036,
                5102,
                307,
                264,
                46261,
                13,
                7328,
                281,
                264,
                51393
            ],
            "temperature": 0,
            "avg_logprob": -0.091932185,
            "compression_ratio": 1.6403508,
            "no_speech_prob": 6.6893496e-13
        },
        {
            "id": 98,
            "seek": 5569,
            "start": 507.10574,
            "end": 513.62573,
            "text": " dictionary, a facade is an outward appearance that is maintained to conceal a less pleasant",
            "tokens": [
                51393,
                25890,
                11,
                257,
                46261,
                307,
                364,
                26914,
                8967,
                300,
                307,
                17578,
                281,
                40170,
                257,
                1570,
                16232,
                51719
            ],
            "temperature": 0,
            "avg_logprob": -0.091932185,
            "compression_ratio": 1.6403508,
            "no_speech_prob": 6.6893496e-13
        },
        {
            "id": 99,
            "seek": 8277,
            "start": 513.62573,
            "end": 520.2457,
            "text": " or credible reality. In the programming world, the outward appearance is the class or interface",
            "tokens": [
                50365,
                420,
                32757,
                4103,
                13,
                682,
                264,
                9410,
                1002,
                11,
                264,
                26914,
                8967,
                307,
                264,
                1508,
                420,
                9226,
                50696
            ],
            "temperature": 0,
            "avg_logprob": -0.062140286,
            "compression_ratio": 1.6244541,
            "no_speech_prob": 7.148623e-13
        },
        {
            "id": 100,
            "seek": 8277,
            "start": 520.2457,
            "end": 526.8657,
            "text": " we interact with as programmers, and the less pleasant reality is hopefully the complexity",
            "tokens": [
                50696,
                321,
                4648,
                365,
                382,
                41504,
                11,
                293,
                264,
                1570,
                16232,
                4103,
                307,
                4696,
                264,
                14024,
                51027
            ],
            "temperature": 0,
            "avg_logprob": -0.062140286,
            "compression_ratio": 1.6244541,
            "no_speech_prob": 7.148623e-13
        },
        {
            "id": 101,
            "seek": 8277,
            "start": 526.8657,
            "end": 533.38574,
            "text": " that is hidden from us. So a facade is simply a wrapper class that can be used to abstract",
            "tokens": [
                51027,
                300,
                307,
                7633,
                490,
                505,
                13,
                407,
                257,
                46261,
                307,
                2935,
                257,
                46906,
                1508,
                300,
                393,
                312,
                1143,
                281,
                12649,
                51353
            ],
            "temperature": 0,
            "avg_logprob": -0.062140286,
            "compression_ratio": 1.6244541,
            "no_speech_prob": 7.148623e-13
        },
        {
            "id": 102,
            "seek": 8277,
            "start": 533.38574,
            "end": 539.3657,
            "text": " lower-level details that we don't want to have to worry about. I'm surprised it even qualifies",
            "tokens": [
                51353,
                3126,
                12,
                12418,
                4365,
                300,
                321,
                500,
                380,
                528,
                281,
                362,
                281,
                3292,
                466,
                13,
                286,
                478,
                6100,
                309,
                754,
                4101,
                11221,
                51652
            ],
            "temperature": 0,
            "avg_logprob": -0.062140286,
            "compression_ratio": 1.6244541,
            "no_speech_prob": 7.148623e-13
        },
        {
            "id": 103,
            "seek": 10851,
            "start": 539.3657,
            "end": 546.38574,
            "text": " as a design pattern, but some common examples might include HTTP clients that abstract away",
            "tokens": [
                50365,
                382,
                257,
                1715,
                5102,
                11,
                457,
                512,
                2689,
                5110,
                1062,
                4090,
                33283,
                6982,
                300,
                12649,
                1314,
                50716
            ],
            "temperature": 0,
            "avg_logprob": -0.05072552,
            "compression_ratio": 1.4901186,
            "no_speech_prob": 6.162523e-13
        },
        {
            "id": 104,
            "seek": 10851,
            "start": 546.38574,
            "end": 555.52576,
            "text": " low-level network details, or even arrays. Yes, a dynamic array like vectors in C++ or array lists",
            "tokens": [
                50716,
                2295,
                12,
                12418,
                3209,
                4365,
                11,
                420,
                754,
                41011,
                13,
                1079,
                11,
                257,
                8546,
                10225,
                411,
                18875,
                294,
                383,
                25472,
                420,
                10225,
                14511,
                51173
            ],
            "temperature": 0,
            "avg_logprob": -0.05072552,
            "compression_ratio": 1.4901186,
            "no_speech_prob": 6.162523e-13
        },
        {
            "id": 105,
            "seek": 10851,
            "start": 555.52576,
            "end": 562.82574,
            "text": " in Java are constantly being resized under the hood. Thankfully, as programmers, we rarely have",
            "tokens": [
                51173,
                294,
                10745,
                366,
                6460,
                885,
                725,
                1602,
                833,
                264,
                13376,
                13,
                28344,
                11,
                382,
                41504,
                11,
                321,
                13752,
                362,
                51538
            ],
            "temperature": 0,
            "avg_logprob": -0.05072552,
            "compression_ratio": 1.4901186,
            "no_speech_prob": 6.162523e-13
        },
        {
            "id": 106,
            "seek": 10851,
            "start": 562.82574,
            "end": 567.7457,
            "text": " to think about memory allocation, though. If you're interested to learn more, check out my",
            "tokens": [
                51538,
                281,
                519,
                466,
                4675,
                27599,
                11,
                1673,
                13,
                759,
                291,
                434,
                3102,
                281,
                1466,
                544,
                11,
                1520,
                484,
                452,
                51784
            ],
            "temperature": 0,
            "avg_logprob": -0.05072552,
            "compression_ratio": 1.4901186,
            "no_speech_prob": 6.162523e-13
        },
        {
            "id": 107,
            "seek": 13689,
            "start": 567.7457,
            "end": 574.46576,
            "text": " newly released object-oriented design interview course. We tackle some popular interview questions.",
            "tokens": [
                50365,
                15109,
                4736,
                2657,
                12,
                27414,
                1715,
                4049,
                1164,
                13,
                492,
                14896,
                512,
                3743,
                4049,
                1651,
                13,
                50701
            ],
            "temperature": 0,
            "avg_logprob": -0.112943284,
            "compression_ratio": 1.5104166,
            "no_speech_prob": 5.789142e-13
        },
        {
            "id": 108,
            "seek": 13689,
            "start": 574.46576,
            "end": 580.5458,
            "text": " I've included video lessons, written articles, and code for four languages, and I'll be sure",
            "tokens": [
                50701,
                286,
                600,
                5556,
                960,
                8820,
                11,
                3720,
                11290,
                11,
                293,
                3089,
                337,
                1451,
                8650,
                11,
                293,
                286,
                603,
                312,
                988,
                51005
            ],
            "temperature": 0,
            "avg_logprob": -0.112943284,
            "compression_ratio": 1.5104166,
            "no_speech_prob": 5.789142e-13
        },
        {
            "id": 109,
            "seek": 13689,
            "start": 580.5458,
            "end": 586.70575,
            "text": " to add additional lessons in the future. Thanks for watching, and make sure to subscribe, please.",
            "tokens": [
                51005,
                281,
                909,
                4497,
                8820,
                294,
                264,
                2027,
                13,
                2561,
                337,
                1976,
                11,
                293,
                652,
                988,
                281,
                3022,
                11,
                1767,
                13,
                51313
            ],
            "temperature": 0,
            "avg_logprob": -0.112943284,
            "compression_ratio": 1.5104166,
            "no_speech_prob": 5.789142e-13
        }
    ],
    "x_groq": {
        "id": "req_01jrvtg9e8ej6s1xymdrfv1xc5"
    }
}